// Main users table - stores core information about individuals and companies managing patients
Table Users {
  id              int [pk, increment]
  first_name      varchar(100) [not null]
  last_name       varchar(100) [not null]
  middle_name     varchar(100) [null]
  date_of_birth   date [not null] // Age can be calculated from date_of_birth
  phone_number    varchar(20) [unique, not null] // Primary contact number
  email           varchar(255) [unique, not null] // Primary email
  gender          enum("Male", "Female", "Other")
  hashed_password varchar(255) [null] // Null if user only uses OAuth
  wallet_id       int [null, ref: > UserWallet.id] // Reference to user's digital wallet
  referral_code   varchar [null] // Code used for referral program
  business_name   varchar(255) [null] // For business/company accounts
  legal_name      varchar(255) [null] // Legal business name if different
  failed_attempts int [default: 0] // Track failed login attempts for security
  is_locked       boolean [default: false] // Account gets locked after too many failed attempts
  created_at      timestamp [default: now()]
  updated_at      timestamp [default: now()]
}

// Secondary email addresses for users - allows multiple email management
Table UserEmails {
  id         int [pk, increment]
  user_id    int [not null, ref: > Users.id]
  email      varchar(255) [unique, not null]
  is_primary boolean [default: false] // Indicates if this is the main email
  verified   boolean [default: false] // Email verification status
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  Indexes {
    (user_id, email) [unique] // Prevents duplicate emails for same user
  }
}

// Supported authentication methods/providers
Table AuthProviders {
  id       int [pk, increment]
  provider enum("email", "apple", "google", "facebook", "other") [not null]
  created_at timestamp [default: now()]
}

// Links users to their authentication methods
Table UserAuth {
  id           int [pk, increment]
  user_id      int [not null, ref: > Users.id]
  provider_id  int [not null, ref: > AuthProviders.id]
  provider_uid varchar(255) [not null] // External provider's unique identifier
  created_at   timestamp [default: now()]
  updated_at   timestamp [default: now()]

  Indexes {
    (user_id, provider_id) [unique] // One auth method per provider per user
  }
}

// Additional user information and preferences
Table UserProfiles {
  id         int [pk, increment]
  user_id    int [not null, ref: > Users.id]
  bio        text // User's description/biography
  location   varchar(255) // User's general location
  interests  text // User's interests/preferences
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// Linked social media accounts for users
Table SocialMediaAccounts {
  id           int [pk, increment]
  user_id      int [not null, ref: > Users.id]
  platform     enum("twitter", "linkedin", "instagram", "tiktok", "youtube") [not null]
  username     varchar(255) [not null]
  profile_url  varchar(255) // Direct link to social profile
  experiences  text  // Users can share experiences related to this platform
  created_at   timestamp [default: now()]
  updated_at   timestamp [default: now()]

  Indexes {
    (user_id, platform) [unique] // A user can have only one account per platform
  }
}

// Password reset request management
Table PasswordResets {
  id            int [pk, increment]
  user_id       int [not null, ref: > Users.id]
  reset_token   varchar(255) [not null] // Unique token for password reset
  expires_at    timestamp [not null] // Token expiration time
  created_at    timestamp [default: now()]
  used          boolean [default: false] // Prevents token reuse
}

// Security audit trail for user actions
Table SecurityLogs {
  id            int [pk, increment]
  user_id       int [not null, ref: > Users.id]
  action        enum("failed_login", "password_reset", "account_locked") [not null]
  ip_address    varchar(45) [not null] // IPv4 or IPv6 address
  user_agent    text // Browser/device information
  created_at    timestamp [default: now()]
}

// Geographic service availability tracking
Table ServiceRegions {
  id           int [pk, increment]
  country_code varchar(2) [not null, default: "CA"] // ISO country code
  province     varchar(100) [not null] // Province/state name
  city         varchar(255) [not null] // City name
  postal_code  varchar(10) [not null] // Postal code in A1A 1A1 format
  is_active    boolean [default: false] // Service availability flag
  activated_at timestamp [null] // When service became available
  created_at   timestamp [default: now()]
  updated_at   timestamp [default: now()]

  Indexes {
    (country_code, province, city, postal_code) [unique] // Prevents duplicate regions
  }
}

// Manages waiting list for unavailable service areas
Table ServiceWaitlist {
  id           int [pk, increment]
  user_id      int [not null, ref: > Users.id]
  region_id    int [not null, ref: > ServiceRegions.id]
  request_date timestamp [default: now()]
  notified     boolean [default: false] // Tracks notification status
  created_at   timestamp [default: now()]
  updated_at   timestamp [default: now()]

  Indexes {
    (user_id, region_id) [unique] // One waitlist entry per user per region
  }
}

// Service availability request tracking
Table UserServiceRequests {
  id           int [pk, increment]
  user_id      int [not null, ref: > Users.id]
  region_id    int [not null, ref: > ServiceRegions.id]
  request_date timestamp [default: now()]
  status       enum("pending", "approved", "denied") [default: "pending"]
  created_at   timestamp [default: now()]
  updated_at   timestamp [default: now()]

  Indexes {
    (user_id, region_id, status) // For efficient request status lookup
  }
}

// Phone number verification system
Table UserPhoneVerifications {
  id                int [pk, increment]
  user_id           int [not null, ref: > Users.id]
  phone_number      varchar(20) [not null]
  verification_code varchar(6) [not null] // SMS verification code
  is_verified       boolean [default: false]
  expires_at        timestamp [not null] // Code expiration time
  created_at        timestamp [default: now()]
  updated_at        timestamp [default: now()]
  
  Indexes {
    (user_id, phone_number) [unique] // One verification process per phone number
  }
}

// Customer support contact information
Table SupportContacts {
  id            int [pk, increment]
  type          enum("phone", "email", "website", "live_chat", "social_media") [not null]
  value         varchar(255) [not null] // Actual contact information
  description   text [null] // Additional contact details
  is_active     boolean [default: true] // Current availability status
  created_at    timestamp [default: now()]
  updated_at    timestamp [default: now()]

  Indexes {
    (type, value) [unique] // Prevents duplicate contact methods
  }
}

// user address info
Table UserAddress {
  id int [pk, increment]
  user_id int [not null, ref: > Users.id]
  unit_no varchar(50) [null]
  street_address varchar(255) [not null]
  city varchar(100) [not null]
  province varchar(100) [not null]
  postal_code varchar(20) [not null]
  country varchar(100) [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

// subscriptions info
Table Subscriptions {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  price decimal(10, 2) [not null]
  duration enum('monthly', 'yearly') [not null]
  created_at timestamp [not null]
}

// user subscriptions historical info
Table UserSubscriptions {
  id int [pk, increment]
  user_id int [not null, ref: > Users.id]
  subscription_id int [not null, ref: > Subscriptions.id]
  start_date date [not null]
  end_date date [null]
  status enum('active', 'inactive', 'cancelled') [not null]
  created_at timestamp [not null]
}

// storing basic info like name, email, user managing patients treatments, age, dob, gender
// other notes, address, 
Table Patients {
  id integer [pk, increment]
  user_id INT [not null, ref: > Users.id]
  email varchar(255) [unique, not null]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  middle_name varchar(100) [null]
  age integer [not null]
  date_of_birth date [not null]
  gender enum("Male", "Female", "Other") [not null]
  profile_picture varchar(255) [null]
  hashed_password varchar(255) [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  notes text [null]
}

// address info for patients
Table PatientAddress {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  unit_no varchar(50) [null]
  street_address varchar(255) [not null]
  city varchar(100) [not null]
  province varchar(100) [not null]
  postal_code varchar(20) [not null]
  country varchar(100) [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

// contacts info for patients
Table PatientContacts {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  email_address varchar(255) [null]
  phone_number varchar(20) [null]
  created_at timestamp [not null]
}

// terms used for medicine
Table Medicine {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// medicine to be used for patients during a job and care plan
Table PatientMedicine {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  medicine_id int [not null, ref: > Medicine.id]
  careplan_id int [not null, ref: > CarePlans.id]
  assigned_by int [not null, ref: > Users.id]
  //recorded_by int [ref: > HealthcareWorkers.hcw_id]
  recorded_at timestamp [not null]
  dosage varchar(100) [not null]
  frequency enum('daily', 'weekly', 'monthly', 'as needed') [not null]
  notes text [null]
}

// personal interests terms
Table PersonalInterests {
  id int [pk, increment]
  name varchar [unique, not null]
  description text [null]
}

Table HealthcareWorkerPersonalInterests {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  interest_id int [not null, ref: > PersonalInterests.id]
}

// personal interests for a patient
Table PatientPersonalInterests {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  interest_id int [not null, ref: > PersonalInterests.id]
}

// table for holding terms for mobility challenges care is provided for
Table MobilityChallenges {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// table holding info for mobility challenges a patient experiences and who recorded that
Table PatientMobilityChallenges {
  id int [pk, increment]
  mobilitychallenges_id int [not null, ref: > MobilityChallenges.id]
  patient_id int [not null, ref: > Patients.id]
  assigned_by int [not null, ref: > Users.id]
  careplan_id int [not null, ref: > CarePlans.id]
  //recorded_by int [ref: >HealthcareWorkers.hcw_id]
  recorded_at timestamp [not null]
  description text [null]
}

// info about mobility challenges managed by a user or company possible marketing purposes later
Table UserManagedMobilityChallenges {
  id int [pk, increment]
  mobilitychallenges_id int [not null, ref: > MobilityChallenges.id]
  user_id int [not null, ref: > Users.user_id]
  assigned_at timestamp [not null]
  description text [null]
}

// perception communication issues a vocabulary for holding info about care activities
Table PreceptionCommunicationIssues {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// perception communication issues recorded for a patient
Table PatientPreceptionCommunicationIssues {
  id int [pk, increment]
  preceptioncommunicationissues_id int [not null, ref: > PreceptionCommunicationIssues.id]
  patient_id int [not null, ref: > Patients.id]
  assigned_by int [not null, ref: > Users.id]
  careplan_id int [not null, ref: > CarePlans.id]
  //recorded_by int [ref: > HealthcareWorkers.hcw_id]
  recorded_at timestamp [not null]
  description text [null]
}

// info about perception communication issues managed by a user or company possible marketing purposes later
Table UserManagedPreceptionCommunicationIssues {
  id int [pk, increment]
  preceptioncommunicationissues_id int [not null, ref: > PreceptionCommunicationIssues.id]
  user_id int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
  description text [null]
}

// holding info for terms for nutritional challenges
Table NutritionalChallenges {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  notes text [null]
}

// recorded info for patients with nutritional challenges
Table PatientNutritionalChallenges {
  id int [pk, increment]
  nutritionalchallenges_id int [not null, ref: > NutritionalChallenges.id]
  patient_id int [not null, ref: > Patients.id]
  careplan_id int [not null, ref: > CarePlans.id]
  assigned_by int [not null, ref: > Users.id]
  //recorded_by int [ref: > HealthcareWorkers.hcw_id]
  recorded_at timestamp [not null]
  notes text [null]
}

// info about nutritional challenges managed by a user or company possible marketing purposes later
Table UserManagedNutritionalChallenges {
  id int [pk, increment]
  nutritionalchallenges_id int [not null, ref: > NutritionalChallenges.id]
  user_id int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
  notes text [null]
}

// mood states terms info
Table Moods {
  id int [pk, increment]
  name varchar(100) [unique]
  description text [null]
}

// patients mood info and changes recorded
Table PatientMoods {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  mood_id int [not null, ref: > Moods.id]
  careplan_id int [not null, ref: > CarePlans.id]
  recorded_at timestamp [not null]
  //recorded_by int [ref: > HealthcareWorkers.hcw_id]
  assigned_by int [not null, ref: > Users.id]
  notes text [null]
}

// info about patient moods states managed by a user or company possible marketing purposes later
Table UserManagedMoods {
  id int [pk, increment]
  mood_id int [not null, ref: > Moods.id]
  user_id int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
  notes text [null]
}

// info about health conditions terms for care
Table HealthConditions {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// health conditions recorded for a patient
Table PatientHealthConditions {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  healthconditions_id int [not null, ref: > HealthConditions.id]
  //recorded_by int [ref: > HealthcareWorkers.hcw_id]
  careplan_id int [not null, ref: > CarePlans.id]
  assigned_by int [not null, ref: > Users.id]
  recorded_at timestamp [not null]
  notes text [null]
}

// info about health conditions managed by a user or company possible marketing purposes later
Table UserManagedHealthConditions {
  id int [pk, increment]
  healthconditions_id int [not null, ref: > HealthConditions.id]
  user_id int [not null, ref: > Users.id]
  started_at date [not null]
  assigned_at timestamp [not null]
}

// terms for cognition states
Table CognitionStates {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// recorded info about patients cognition states
Table PatientCognition {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  cognition_id int [not null, ref: > CognitionStates.id]
  careplan_id int [not null, ref: > CarePlans.id]
  assigned_by int [not null, ref: > Users.id]
  recorded_at timestamp [not null]
  severity enum('Mild', 'Moderate', 'Severe') [not null]
  notes text [null]
}

// terms for allergies 
Table Allergies {
  id int [pk, increment]
  name varchar(200) [unique, not null]
  description text [null]
}

// patient allergy info recorded
Table PatientAllergies {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  allergy_id int [not null, ref: > Allergies.id]
  careplan_id int [not null, ref: > CarePlans.id]
  assigned_by int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
}

// diagnosis terms and conditions info
Table Diagnosis {
  id int [pk, increment]
  name varchar(200) [unique, not null]
  description text [null]
}

// patient diagnosis info recorded
Table PatientDiagnosis {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  diagnosis_id int [not null, ref: > Diagnosis.id]
  careplan_id int [not null, ref: > CarePlans.id]
  assigned_by int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
}

// types of property info
Table PropertyType {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [not null]
}

// info about patients property types
Table PatientPropertyType {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  property_type_id int [not null, ref: > PropertyType.id]
  assigned_by int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
}

// info about property types managed by a user or company possible marketing purposes later
Table UserManagedPropertyType {
  id int [pk, increment]
  property_type_id int [not null, ref: > PropertyType.id]
  user_id int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
}

// different caresettings info
Table CareSettings {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [not null]
}

// info about patients care setting
Table PatientCareSettings {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  care_setting_id int [not null, ref: > CareSettings.id]
  assigned_by int [not null, ref: > Users.id]
  assigned_at timestamp [not null]
}

// info about care settings managed by a user or company possible marketing purposes later
Table UserManagedCareSettings {
  id int [pk, increment]
  user_id int [not null, ref: > Users.id]
  care_setting_id int [not null, ref: > CareSettings.id]
  created_at timestamp [not null]
}

// care settings HCW preferrs working in
Table HealthcareWorkerSettingsPref {
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  setting_id int [not null, ref: > CareSettings.id]
  primary key (hcw_id, setting_id)
}

// posted jobs info
Table Jobs {
  id integer [pk, increment]
  user_id INT [not null, ref: > Users.id]
  patient_id INT [not null, ref: > Patients.id]
  job_status enum('reposted', 'paused', 'closed', 'active') [not null]
  position varchar(255) [not null]
  currency varchar(10) [not null]
  employment_class enum("Permanent P/T", "Permanent F/T", "Temporary P/T", "Temporary F/T", "Casual") [not null]
  job_description varchar(500) [not null]
  nursing_activity bool [not null]
  childcare_activity bool [not null]
  supportworker_activity bool [not null]
  total_budget float [null]
  hourly_rate float [null]
  livein_flat_daily_rate float [null]
  care_recurrence_type enum("one time", "repeat weekly") [not null]
  shift_type enum("day shift", "night shift", "live in") [not null]
  start_date date [not null]
  end_date date [not null]
  start_time time [not null]
  end_time time [not null]
  total_weekly_hours float [not null]
  expected_care_activity_length integer [not null]
  HCW_experience_preferred integer [null]
  job_type enum("employment", "independent contractor", "volunteer", "sponsorship") [not null]
  policy_group enum("Webookcare App Healthcare Workers") [not null]
  permission_group enum("Regular Employee (Punch In/Out)", "Admin", "Manager") [not null]
  days enum('saturday', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday') [null]
  job_type_schedule enum("permanent part time", "permanent F/T", "temporary P/T", "temporary F/T", "casual") [not null]
  salary_type enum("Hourly", "Salary (Weekly)", "Salary (Bi-Weekly)", "Salary (Monthly)", "Salary (Annual)") [not null]
  pay_period_schedule enum("Bi-Weekly (26/year)", "Bi-Weekly (27/year)", "Manual", "Monthly (12/year)", "Semi-Monthly Non-Standard", "Weekly") [not null]
  additional_notes varchar(500) [null]
  created_at timestamp [not null]
}

// types of jobs i.e. "employment", "independent contractor", "volunteer", "sponsorship"
Table JobTypes {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// job types preferrence for HCWs
Table HealthcareWorkerJobsPref {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  job_type_id int [not null, ref: > JobTypes.id]
}

// Tracks messages related to job applications or active jobs
Table JobMessages {
  id int [pk, increment]
  sender_id int [not null, ref: > Users.id]
  receiver_id int [not null, ref: > Users.id]
  job_application_id int [null, ref: > JobApplications.id]
  hcwjob_id int [ref: > HCWJobs.id]
  message_text text [not null]
  attachment_link varchar [null]
  sent_at timestamp [null]
  read_status enum("Unread", "Read") [null]
  created_at timestamp [null]
  updated_at timestamp [not null]
}

// TODO: check for compaibility with jobs and care plans
// care schedules associated with a care plan
Table CareSchedules {
  id integer [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  careplan_id int [not null, ref: > CarePlans.id]
  //user_id INT [not null, ref: > Users.user_id]
  hcw_id int [null, ref: > HealthcareWorkers.id]
  total_hours integer [not null]
  start_time datetime [not null]
  end_time datetime [not null]
  location varchar(255) [not null]
  status enum('pending', 'completed', 'cancelled', 'missed') [not null]
}

// which hcw have access to a careplan
Table CarePlanShares {
  id int [pk, increment]
  careplan_id int [not null, ref: > CarePlans.id]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  status enum("pending", "accepted", "declined") [not null]
}

Table PaymentSchedules {
  id int [pk, increment]
  worker_id int [not null, ref: > HealthcareWorkers.id]
  job_id int [not null, ref: > Jobs.id]
  patient_id int [not null, ref: > Patients.id]
  timezone varchar [not null]
  date_format varchar [not null]
  time_format varchar [not null]
  calendar_start_day enum('sat', 'sun', 'mon', 'tue', 'wed', 'thu', 'fri') [not null]
  pay_period_frequency enum('weekly (52/year)', 'bi-weekly (26/year)', 'semi-monthly (26/year)', 'monthly (12/year)', 'weekly (53/year)', 'bi-weekly (27/year)') [not null]
  start_date date [null]
  end_date date [null]
  transaction_date date [null]
}

// user wallet information
Table UserWallet {
  id int [pk, increment]
  user_id int [not null, ref: > Users.id]
  balance decimal(10, 2) [not null]
  last_updated timestamp [not null]
  created_at timestamp [not null]
  //payment_methods enum('stripe')
  //paystubs varchar
  //expenses
  //invoice_id
}

// invoice created for the users as a results of jobs, etc.
Table UserInvoices {
  id int [pk, increment]
  user_id int [not null, ref: > Users.id]
  patient_id int [not null, ref: > Patients.id]
  invoice_start_date date [not null]
  invoice_end_date date [not null]
  total_amount decimal(10,2) [not null]
  due_date date [not null]
  status enum("pending", "paid", "overdue") [not null]
  created_at timestamp [not null]
}

//Table UserPayment {
//  payment_id int [pk, increment]
//  invoice_id int [ref: > UserInvoice.invoice_id]
//  wallet_id int [ref: > UserWallet.wallet_id]
//  paymentschedule_id int [ref: > PaymentSchedules.paymentschedule_id]
//  done_at timestamp
//  payment_date date
//  payment_method enum('credit', 'debit')
//}

// expenses occured during a care schedule recorded by a hcw
Table Expenses {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  schedule_id int [not null, ref: > CareSchedules.id]
  expense_date date [not null]
  expense_description varchar [not null]
  payment_method enum('cash', 'debit', 'credit', 'direct deposit', 'digital wallet', 'cheque') [not null]
  expense_type enum('groceries', 'medical', 'personal prediction equipment', 'supplies', 'parking',
                    'travel_related', 'meals', 'incidental expenses', 'entertainment', 'other') [not null]
  amount decimal(10, 2) [not null]
  attachments varchar [null]
  description text [null]
  status enum('pending', 'approved', 'rejected') [not null]
  created_at timestamp [not null]
}

// probably wrong we don't want to store same info as Expenses
Table UserTransactions {
  id int [pk, increment]
  wallet_id int [not null, ref: > UserWallet.id]
  recorded_by int [not null, ref: > HealthcareWorkers.id]
  job_id int [not null, ref: > Jobs.id]
  transaction_type enum("Expense", "Deposit", "Refund", "Adjustment", 'invoice payment') [not null]
  category enum("HCW Service", "Medical Supply", "Transportation", "Other") [not null]
  amount decimal(10,2) [not null]
  payment_method enum("Cash", "Credit Card", "Insurance", "Wallet Deduction") [not null]
  status enum("Pending", "Completed", "Reversed", 'declined') [not null]
  created_at timestamp [not null]
  notes text [null]
}

// pay stubs generated by a user for a hcw for a care schedule
Table UserGeneratedPaystubs {
  id int [pk, increment]
  schedule_id int [not null, ref: > CareSchedules.id]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  period_start date [not null]
  period_end date [not null]
  total_hours decimal(5,2) [not null]
  total_pay decimal(10,2) [not null]
  generated_at timestamp [not null]
}

// credentials needed for the job
Table JobCredentials {
    id int [pk, increment]
    credentials_id int [not null, ref: > Credentials.id]
    job_id int [not null, ref: > Jobs.id]
}

// services needed for the job
Table JobServices {
    id int [pk, increment]
    service_id int [not null, ref: > Services.id]
    job_id int [not null, ref: > Jobs.id]
    service_routine enum('morning', 'lunch', 'afternoon', 'dinner', 'evening') [null]
    scheduled_manner bool [not null]
    days enum('sat', 'sun', 'mon', 'tue', 'wed', 'thu', 'fri') [null]
    notes text [null]
}

// exceptions for work environments i.e. caged pets, nanny cams, etc.
Table WorkEnvironmentExceptions {
    id int [pk, increment]
    name varchar(200) [unique, not null]
    description text [null]
}

// jobs and work environment exceptions associated with it
Table JobWorkEnvironmentExceptions {
    id int [pk, increment]
    work_environment_exceptions_id int [not null, ref: > WorkEnvironmentExceptions.id]
    job_id int [not null, ref: > Jobs.id]
}

// languages served on the platform
Table Languages {
    id int [pk, increment]
    name varchar(100) [unique, not null]
}

// languages desired for the job posting
Table JobLanguages {
    id int [pk, increment]
    language_id int [not null, ref: > Languages.id]
    job_id int [not null, ref: > Jobs.id]
    hcw_id int [not null, ref: > HealthcareWorkers.id]
}

// historical data for building patient profiles for later
Table PatientPrefLanguages {
    id int [pk, increment]
    language_id int [not null, ref: > Languages.id]
    patient_id int [not null, ref: > Patients.id]
}

// historical data for building user profiles for later use
Table UserPrefLanguages {
    id int [pk, increment]
    language_id int [not null, ref: > Languages.id]
    user_id int [not null, ref: > Users.id]
}

// historical info for building patient profiles for later use
Table PatientPrefSkills {
    id int [pk, increment]
    skill_id int [not null, ref: > Skills.id]
    patient_id int [not null, ref: > Patients.id]
}

// historical info for building user profiles for later use
Table UserPrefSkills {
    id int [pk, increment]
    skill_id int [not null, ref: > Skills.id]
    user_id int [not null, ref: > Users.id]
}

// historical info for building patient profiles for later use
Table PatientPrefCredentials {
    id int [pk, increment]
    credentials_id int [not null, ref: > Credentials.id]
    patient_id int [not null, ref: > Patients.id]
}

// historical info for building user profiles for later use
Table UserPrefCredentials {
    id int [pk, increment]
    credentials_id int [not null, ref: > Credentials.id]
    user_id int [not null, ref: > Users.id]
}


// info for child care activities
Table ChildCareActivity {
    id int [pk, increment]
    name varchar(100) [unique, not null]
    description text [null]
}

// jobs involving child care activities and hcw who did the job
Table JobChildCareActivity {
    id int [pk, increment]
    job_id int [not null, ref: > Jobs.id]
    hcw_id int [not null, ref: > HealthcareWorkers.id]
    notes text [null]
}

// info for adult care activities
Table AdultCareActivity {
    id int [pk, increment]
    name varchar(100) [unique, not null]
    description text [null]
}

// adult care activities for a specific job
Table JobAdultCareActivity {
    id int [pk, increment]
    job_id int [not null, ref: > Jobs.id]
    hcw_id int [not null, ref: > HealthcareWorkers.id]
    notes text [null]
}

// care plan for a specific job, patient
Table CarePlan {
  id int [pk, increment]
  patient_id int [not null, ref: > Patients.id]
  job_id int [not null, ref: > Jobs.id]
  description text [null]
  start_date date [not null]
  end_date date [not null]
  created_at timestamp [not null]
  updated_at timestamp [null]
}

// care team assigned for the care plan
Table CarePlanCareTeam {
  id int [pk, increment]
  careplan_id int [not null, ref: > CarePlan.id]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  role enum("Primary Caregiver", "Secondary Caregiver", "Support Worker", "Therapist", "Nurse", "Physician", "Specialist", "Other") [not null]
}

// chartting for care plans for a patient during a job
Table CarePlanChartting {
  id int [primary key, increment]
  patient_id int [not null, ref: > Patients.id]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  care_plan_id int [not null, ref: > CarePlans.id]
  chart_date timestamp [not null]
  vital_signs json [null]
  medications_administered json [null]
  daily_care_activities text [null]
  symptoms_observed text [null]
  meal_intake text [null]
  bowel_bladder text [null]
  wound_care text [null]
  mood_behavior text [null]
  emergency_situations text [null]
  additional_notes text [null]
  attachments json [null]
  signature varchar(255) [not null]
  updated_at timestamp [null]
}

// Join table for the many-to-many relationship
Table job_credentials {
  job_id int [not null, ref: > Jobs.id]
  credential_id int [not null, ref: > credentials.id]
  primary key (job_id, credential_id)
}

// Join table for the many-to-many relationship
Table job_services {
  job_id int [not null, ref: > Jobs.id]
  service_id int [not null, ref: > Services.id]
  primary key (job_id, service_id)
}

// Join table for the many-to-many relationship
Table job_personal_interests {
  job_id int [not null, ref: > Jobs.id]
  interest_id int [not null, ref: > PersonalInterests.id]
  primary key (job_id, interest_id)
}

// base table for healthcare workers info
Table HealthcareWorkers {
  id int [pk, increment]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  middle_name varchar(100) [null]
  business_name varchar(255) [null]
  legal_name varchar(255) [null]
  email varchar(255) [unique, not null]
  apple_email varchar(255) [unique, null]
  google_email varchar(255) [unique, null]
  facebook_id varchar(255) [unique, null]
  hashed_password varchar(255) [not null]
  date_of_birth date [not null]
  sin_ssn varchar(20) [unique, not null]
  gender enum("Male", "Female", "Other") [not null]
  contact_info varchar(255) [not null]
  ethnicity int [null, ref: > Ethnicities.id]
  status enum("Active", "Inactive (Temporary)", "Leave - Illness/Injury", "Leave - Maternity/Parental", "Leave - Other", "Terminated/Quit") [not null]
  profile_picture varchar(255) [null]
  intro_video varchar(255) [null]
  experience_years int [null]
  membership_start date [null]
  updated_at timestamp [not null]
  notes text [null]
}

Table Rates {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  //category_id int [not null, ref: > HealthcareWorkerCategories.id]
  //subcategory_id int [ref: > HealthcareWorkerSubcategories.id]
  rate decimal(10,2) [not null]
  rate_type enum('hourly', 'daily', 'contract', 'live-in flat daily') [not null]
  effective_date date [not null]
}

// healthcare worker expertise terms
Table HealthcareWorkerExpertise {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// Healthcare worker expertise info
Table HealthcareWorkerExpertiseInfo {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  expertise_id int [not null, ref: > HealthcareWorkerExpertise.id]
  assign_date date [not null]
  notes text [null]
}

// shifts terms for hcw
Table HealthcareWorkerShifts {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  notes text [null]
}

// shifts preferrence for hcw
Table HealthcareWorkerShiftsPref {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  shift_id int [not null, ref: > HealthcareWorkerShifts.id]
}

// healthcare worker schedules types ["Permanent P/T", "Permanent F/T", "Temporary P/T", "Temporary F/T", "Casual"]
Table HealthcareWorkerSchedules {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// healthcare worker schedules preferrence
Table HealthcareWorkerSchedulePref {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  schedule_id int [not null, ref: > HealthcareWorkerSchedules.id]
  num_hours enum('1-8', '8-20', '20-40', '40+') [not null]
  start_date date [not null]
  created_at timestamp [not null]
}

// address history info for HCWs
Table HealthcareWorkersAddress {
  id int [pk, increment] // Unique Address ID
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  unit_no varchar(50) [null]
  street_address varchar(255) [not null]
  city varchar(100) [not null]
  province varchar(100) [not null]
  postal_code varchar(20) [not null]
  country varchar(100) [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

// hcw categories [Nursing, Childcare, Support Worker, etc.]
Table HealthcareWorkerCategories {
    id int [pk, increment]
    category varchar(100) [not null, unique]
    description text [null]
}

// the categories hcw belongs to or works in
Table HealthcareWorkerCategoriesBelong {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  healthcareworkercategories_id int [not null, ref: > HealthcareWorkerCategories.id]
}

// the subcategories hcw belongs to or works in
Table HealthWorkerSubcategoriesBelong {
    id int [pk, increment]
    hcw_id int [not null, ref: > HealthWorkers.id]
    subcategory_id int [not null, ref: > HealthcareWorkerSubcategories.id]
}

// subcategories for hcw categories [nanny for child care, etc.]
Table HealthcareWorkerSubcategories {
    id int [pk, increment]
    cat_id int [not null, ref: > HealthcareWorkerCategories.id]
    recorded_at timestamp [not null]
    notes text [null]
}

// positions vocab for HCWs
Table HealthcareWorkerPositions {
    id int [pk, increment]
    name varchar(100) [not null, unique]
    notes text [null]
}

// historical info for HCW positions
Table HealthcareWorkerPositionsInfo {
    id int [pk, increment]
    hcw_id int [not null, ref: > HealthcareWorkers.id]
    healthcareworkerposition_id int [not null, ref: > HealthcareWorkerPositions.id]
    start_date date [not null]
    end_date date [null]
    notes text [null]
}

// contacts info for HCWs
Table HealthcareWorkerContacts {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  email_address varchar(255) [unique, not null]
  phone_number varchar(20) [null]
  created_at timestamp [null]
}

// notes info for HCWs
Table HealthcareWorkerNotes {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  note text [not null]
  created_at timestamp [not null]
}

// Ethnicities terms
Table Ethnicities {
  id int [pk, increment]
  name varchar(100) [not null, unique]
  description text [null]
}

Table HealthcareWorkerTags {
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  tag_id int [not null, ref: > Tags.id]
  primary key (hcw_id, tag_id)
}

// Tags terms
Table Tags {
  id int [pk, increment]
  name varchar(255) [not null, unique]
  description text [null]
}

// credentials info of HCWs
Table HealthcareWorkerCredentials {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  credential_id int [not null, ref: > credentials.id]
  issue_date date [null]
  expiration_date date [null]
  certification_authority varchar [null]
  document_link varchar [null]
  document_number varchar(100) [null]
  notes text [null]
}

// services terms info
Table Services {
  id int [pk, increment]
  name varchar [not null, unique]
  description text [null]
}

// services offered by a HCW
Table HealthcareWorkerServices {
  id int [pk, increment]
  worker_id int [not null, ref: > HealthcareWorkers.id]
  service_id int [not null, ref: > Services.id]
}

// Tracks HCWs' historical job info (only if hired)
Table HealthcareWorkerJobs {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  job_id int [not null, ref: > Jobs.id]
  status enum('active', 'completed', 'terminated', 'resigned') [not null]
  hired_at timestamp [null]
  start_date date [not null]
  end_date date [not null]
  created_at timestamp [null]
  updated_at timestamp [null]
}

// Tracks applications submitted by HCWs
Table HealthcareWorkerJobApplications {
  id int [pk, increment]
  job_id int [not null, ref: > Jobs.id]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  status enum("Pending", "Shortlisted", "Interview", "Meet & Greet", "Hired", "Rejected") [not null]
  applied_at timestamp [not null]
  hired_at timestamp [null]
  resume_link varchar [null]
  cover_letter text [null]
  created_at timestamp [null]
  updated_at timestamp [null]
}

// documents uploaded by HCWs for a specific application
Table ApplicationDocuments {
  id int [pk, increment]
  application_id int [not null, ref: > JobApplications.id]
  document_type enum("Resume", "Certification", "Reference", "Other") [not null]
  file_url varchar [not null]
  uploaded_at timestamp [not null]
}

// credentials terms info
Table Credentials {
  id int [pk, increment]
  name varchar [not null, unique]
  description text [null]
}

// work environment exceptions preferrence for hcw
Table HealthcareWorkerEnvironmentExceptionsPref {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  exception_id int [not null, ref: > WorkEnvironmentExceptions.id]
}

// skills terms info
Table Skills {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// skills hcw has
Table HealthcareWorkerSkills {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  skill_id int [not null, ref: > Skills.id]
  notes text [null]
}

// health care worker wallet info
Table HealthcareWorkerWallet {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  balance decimal(10, 2) [not null]
  last_updated timestamp [not null]
  created_at timestamp [not null]
}

// performance terms for HCW
Table HealthcareWorkerPerformance {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
}

// info for HCW performance
Table HealthcareWorkerPerformanceInfo {
  id int [pk, increment]
  hcw_id int [not null, ref: > HealthcareWorkers.id]
  performance_id int [not null, ref: > HealthcareWorkerPerformance.id]
  assign_date date [not null]
  notes text [null]
}

// activity info stored for a HCW
Table HealthcareWorkerActivity {
  id int [pk, increment]
  last_calendar_update date [not null]
  last_login date [not null]
  member_since date [not null]
  total_no_bookings int [not null]
}