// overlaps between some patients_ and care_plans_ tables are already noted and will be resolved later
// mostlikely retaining both tables for new cases and old ones

// FLOWS
// a user created with the user Table, user chooses care seeker a patient created using patients, patients_addresses,
// patients_allergies, patients_medicines, patients diagnoses, patients_moods, patients_nutritional_challenges, 
// patients_cognition, patients_health_conditions, patients_perception_communication_issues, patients_mobility_challenges,
// patients_personal_interests, patients_property_types, patients_care_settings, table, care_plans, care_schedules,
// jobs, jobs_healthcare_workers_position, jobs_environment_exceptions, jobs_required_languages,
// care_plan_care_team, jobs_credentials, jobs_services, jobs_personal_interests, care_plans_diagnoses, care_plans_allergies,
// care_plans_cognition_states, care_plans_moods, care_plans_health_conditions, care_plans_nutritional_challenges,
// care_plans_perception_communication_issues, care_plans_mobility_challenges,
// 

// next steps store data in payment_schedules, user_wallets, users_invoices, invoices_items, expenses, users_transactions,
// payment_methods, pay_stubs_generated, job_messages, 

// health care workers upon account creation info filled in the healthcare_workers, healthcare_workers_personal_interests, 
// health_care_workers_preferred_care_settings, healthcare_workers_preferred_job_types, healthcare_workers_rates,
// healthcare_workers_expertise_info, healthcare_workers_category_assignments, healthcare_workers_credentials, 
// healthcare_workers_services, healthcare_workers_jobs, healthcare_workers_job_applications, 
// job_application_documents, healthcare_workers_skills, healthcare_workers_wallets, healthcare_workers_performance_metrics,
// healthcare_workers_performance_records, healthcare_workers_activity_logs, healthcare_workers_availability,
// healthcare_workers_notifications, care_plan_team_members, care_plan_chartting, rates,
// healthcare_workers_preferred_shifts, healthcare_workers_preferred_schedules, healthcare_workers_addresses,
// healthcare_workers_categories_info, healthcare_workers_subcategories_info, healthcare_workers_positions_info,
// healthcare_workers_contacts, healthcare_workers_notes, job_application_documents, healthcare_workers_preferred_environment_exceptions,
// healthcare_workers_emails, healthcare_worker_auth, healthcare_worker_phone_verifications, healthcare_workers_jobs,
// healthcare_workers_activity, 

// terms included for the tables are medicines, personal_interests, mobility_challenges, perception_communication_issues,
// nutritional_challenges, moods, health_conditions, allergies, diagnoses, property_types, care_settings, job_types,
// healthcare_workers_expertise, ethnicities, tags, services, skills, credentials, work_environment_exceptions,
// child_care_activities, adult_care_activities, care_plan_care_team, healthcare_workers_shifts, healthcare_workers_schedules,
// healthcare_workers_categories, healthcare_workers_subcategories, healthcare_workers_positions, 

// historical data gathered for analysis are within user_managed_mobility_challenges, user_managed_perception_communication_issues,
// user_managed_nutritional_challenges, user_managed_moods, user_managed_health_conditions, user_managed_property_types,
// user_managed_care_settings, user_patient_management_history, user_managed_patients, user_patient_management_stats,
// 

// FLOWS SUGGESTION
// asking for info about date of birth, patients contacts, emails for patients_addresses, patients_communication_preferences
//  table

// TAGS allows to track each table info for further improvements and against the original design


// TAGS: INCLUDED_V2
// Main users table - stores core information about individuals and companies managing patients
Table users {
  id                int [pk, increment]
  username          varchar(50) [unique, null]
  first_name        varchar(100) [not null]
  last_name         varchar(100) [not null]
  middle_name       varchar(100) [null]
  date_of_birth     date [not null]
  gender           enum("male", "female", "other", "prefer_not_to_say") [not null]
  primary_email_id int [null, ref: > user_emails.id]
  primary_phone_id int [null, ref: > user_phone_numbers.id]
  wallet_id        int [null, ref: > user_wallets.id] // Reference to user's digital wallet
  timezone          varchar(50) [null]
  preferred_language varchar(10) [null]
  referral_code    varchar(20) [null] // Code used for referral program
  referred_by      int [null, ref: > users.id] // Track who referred this user
  created_at       timestamp [default: now()]
  updated_at       timestamp [default: now()]
  deleted_at       timestamp [null]

  indexes {
    (first_name, last_name)
    username
    referral_code
    referred_by
    status
  }
}

// TAGS: INCLUDED_V2
Table user_addresses {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  address_type enum("home", "work", "billing", "shipping", "other") [not null]
  is_primary boolean [default: false]
  address_line1 varchar(255) [not null]
  address_line2 varchar(255) [null]
  unit_no varchar(50) [null]
  city varchar(100) [not null]
  state_province varchar(100) [not null]
  postal_code varchar(20) [not null]
  country varchar(100) [not null]
  is_verified boolean [default: false]
  is_primary boolean [default: false] // Whether this is the user's primary address
  latitude decimal(10,8) [null] 
  longitude decimal(11,8) [null]
  verified_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id
    address_type
    (user_id, address_type, is_primary)
    postal_code
    country
  }
}

// TAGS: INCLUDED_V2
Table user_contacts {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  middle_name varchar(100) [null]
  relationship varchar(100) [null]
  email varchar(255) [null]
  phone_number varchar(20) [null]
  alt_phone_number varchar(20) [null]
  is_primary boolean [default: false]
  contact_type enum("emergency", "work", "family", "other") [not null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id
    contact_type
    (first_name, last_name)
    email
    phone_number
    (user_id, contact_type, is_primary)
  }
}

// TAGS: INCLUDED_V2
// Secondary email addresses for users
Table user_emails {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  email varchar(255) [unique, not null]
  is_primary boolean [default: false]
  verified boolean [default: false]
  verification_token varchar(255) [null]
  verification_expires_at timestamp [null]
  verification_attempts int [default: 0]
  verified_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    (user_id, email) [unique]
    verification_token
    verification_expires_at
    (user_id, is_primary)
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// secondary contact details for the users
Table user_phone_numbers {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  phone_number varchar(20) [unique, not null]
  is_primary boolean [default: false]
  verified boolean [default: false]
  verification_token varchar(255) [null]
  verification_expires_at timestamp [null]
  verification_attempts int [default: 0]
  verified_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    (user_id, phone_number) [unique]
    phone_number
    (user_id, is_primary)
  }
}

// TAGS: INCLUDED_V2
Table user_security {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  primary_auth_method_id int [null, ref: > user_auth_methods.id]
  hashed_password varchar(255) [null]
  password_changed_at timestamp [null]
  two_factor_enabled boolean [default: false]
  two_factor_secret varchar(255) [null]
  backup_codes json [null]
  failed_attempts int [default: 0]
  is_locked boolean [default: false]
  locked_until timestamp [null]
  last_login_at timestamp [null]
  password_reset_token varchar(255) [null]
  password_reset_expires_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id [unique]
    primary_auth_method_id
    password_reset_token
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// "sole_proprietorship", "partnership", "corporation", "llc"
Table business_types {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    name [unique]
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
Table business_profiles {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  business_name varchar(255) [not null]
  legal_name varchar(255) [not null]
  business_number varchar(50) [unique, not null]
  tax_id varchar(50) [null]
  business_type [not null, ref: > business_types.id]
  industry varchar(100) [null]
  website varchar(255) [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id [unique]
    business_number
    business_type
  }
}

// TAGS: INCLUDED_V2
// Authentication providers configuration
Table auth_providers {
  id int [pk, increment]
  provider enum("email", "phone", "apple", "google", "facebook", "microsoft", "twitter", "linkedin", "github") [not null]
  display_name varchar(100) [not null]
  provider_type enum("oauth", "oauth2", "oidc", "password", "phone") [not null]
  is_active boolean [default: true]
  client_id varchar(255) [null]
  client_secret varchar(255) [null]
  redirect_uri varchar(255) [null]
  scopes text [null]
  icon_url varchar(255) [null]
  order_priority int [default: 0]
  rate_limit_attempts int [null]
  rate_limit_duration interval [null]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    provider [unique]
    provider_type
    is_active
    order_priority
  }
}

// TAGS: INCLUDED_V2
// User authentication methods
Table user_auth_methods {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  provider_id int [not null, ref: > auth_providers.id]
  provider_uid varchar(255) [not null]
  email varchar(255) [null]
  phone varchar(20) [null]
  access_token text [null]
  refresh_token text [null]
  id_token text [null]  // For OpenID Connect
  token_expires_at timestamp [null]
  last_login_at timestamp [null]
  is_primary boolean [default: false]
  verified_at timestamp [null]
  verification_method enum("email", "phone", "admin") [null]
  metadata json [null]
  status enum("active", "revoked", "expired", "pending_verification") [not null, default: "pending_verification"]
  revoked_at timestamp [null]
  revoked_reason text [null]
  last_used_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    (user_id, provider_id) [unique]
    provider_uid
    email
    phone
    is_primary
    status
    last_login_at
    last_used_at
    verified_at
  }

  checks {
    // Ensure either email or phone is provided for relevant providers
    check ((provider_id in (select id from auth_providers where provider in ('email', 'phone')) 
           and (email is not null or phone is not null))
           or provider_id not in (select id from auth_providers where provider in ('email', 'phone')))
  }
}

// TAGS: INCLUDED_V2
// Authentication attempts tracking
Table auth_attempts {
  id int [pk, increment]
  user_id int [null, ref: > users.id]
  auth_method_id int [null, ref: > user_auth_methods.id]
  provider_id int [not null, ref: > auth_providers.id]
  ip_address varchar(45) [not null]
  user_agent text [null]
  device_id varchar(255) [null]
  status enum("success", "failed", "blocked", "rate_limited") [not null]
  failure_reason enum(
    "invalid_credentials",
    "account_locked",
    "account_disabled",
    "invalid_token",
    "expired_token",
    "rate_limited",
    "verification_required",
    "other"
  ) [null]
  attempt_type enum("login", "refresh_token", "reset_password", "verify_email", "verify_phone") [not null]
  attempted_at timestamp [default: now()]
  metadata json [null]

  indexes {
    user_id
    auth_method_id
    provider_id
    ip_address
    device_id
    status
    attempt_type
    attempted_at
    (ip_address, provider_id, attempted_at)
    (user_id, provider_id, attempted_at)
  }
}

// TAGS: INCLUDED_V2
// OAuth state management
Table oauth_states {
  id int [pk, increment]
  state varchar(255) [unique, not null]
  provider_id int [not null, ref: > auth_providers.id]
  redirect_url text [null]
  code_verifier varchar(255) [null]  // For PKCE
  code_challenge varchar(255) [null]  // For PKCE
  code_challenge_method enum("S256", "plain") [null]  // For PKCE
  nonce varchar(255) [null]  // For OpenID Connect
  metadata json [null]
  expires_at timestamp [not null]
  created_at timestamp [default: now()]
  used_at timestamp [null]
  ip_address varchar(45) [not null]
  user_agent text [null]

  indexes {
    state
    provider_id
    expires_at
    used_at
  }
}

// TAGS: INCLUDED_V2 POTENTIALLY_TO_BE_REMOVED
// Additional user information and preferences
// TODO: check with design and possible duplicates
// User profile and preferences (consolidated)
Table user_profiles {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  bio text [null]
  profile_picture varchar(255) [null]
  interests text [null]
  notification_preferences json [null] // {email: {}, sms: {}, push: {}}
  privacy_settings json [null] // {profile_visibility: {}, contact_preferences: {}}
  theme_preference varchar(20) [default: "system"] // light, dark, system
  accessibility_settings json [null]
  marketing_preferences json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id [unique]
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Security audit trail
// Security events and audit log (enhanced)
Table security_events {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  event_type enum(
    // Auth events
    "login_success",
    "login_failure",
    "logout",
    "password_change",
    "password_reset_request",
    "password_reset_complete",
    "mfa_enabled",
    "mfa_disabled",
    "email_change",
    "phone_change",
    // Security events
    "account_lock",
    "account_unlock",
    "suspicious_activity",
    "ip_change",
    // Device events
    "device_added",
    "device_removed",
    "device_trusted",
    "device_untrusted",
    // Session events
    "session_created",
    "session_expired",
    "session_revoked"
  ) [not null]
  auth_method_id int [null, ref: > user_auth_methods.id]
  device_id int [null, ref: > user_devices.id]
  session_id varchar(255) [null, ref: > user_sessions.session_token]
  ip_address varchar(45) [not null]
  location json [null] // {city, region, country, coordinates}
  user_agent text [null]
  severity enum("info", "warning", "critical") [not null]
  metadata json [null]
  created_at timestamp [default: now()]
  request_id uuid [not null]

  indexes {
    user_id
    event_type
    auth_method_id
    device_id
    session_id
    severity
    created_at
    request_id
    (user_id, created_at)
    (event_type, created_at)
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// User sessions with auth method tracking
Table user_sessions {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  auth_method_id int [not null, ref: > user_auth_methods.id]
  session_token varchar(255) [unique, not null]
  refresh_token varchar(255) [unique, null]
  ip_address varchar(45) [not null]
  user_agent text [null]
  expires_at timestamp [not null]
  last_activity timestamp [default: now()]
  is_valid boolean [default: true]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    auth_method_id
    session_token
    refresh_token
    expires_at
    (user_id, is_valid)
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Device tracking for security
// Enhanced device management
Table user_devices {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  device_id varchar(255) [not null] // Unique device identifier
  device_name varchar(100) [not null]
  device_type enum("desktop", "laptop", "tablet", "mobile", "other") [not null]
  os varchar(50) [not null]
  os_version varchar(20) [not null]
  browser varchar(50) [null]
  browser_version varchar(20) [null]
  app_version varchar(20) [null] // For mobile apps
  push_token varchar(255) [null] // For push notifications
  is_trusted boolean [default: false]
  trust_score int [default: 0]
  last_used_at timestamp [not null]
  last_ip varchar(45) [not null]
  last_location json [null]
  failed_auth_count int [default: 0]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deactivated_at timestamp [null]
  deactivation_reason enum("user_initiated", "suspicious_activity", "obsolete", "replaced") [null]

  indexes {
    (user_id, device_id) [unique]
    device_id
    is_trusted
    trust_score
    last_used_at
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Login statistics and security metrics
Table login_stats {
  id                int [pk, increment]
  user_id           int [not null, ref: > users.id]
  successful_logins int [default: 0]
  failed_attempts   int [default: 0]
  last_failed_at    timestamp [null]
  last_success_at   timestamp [null]
  password_resets   int [default: 0]
  suspicious_activities int [default: 0]
  mfa_enabled_at    timestamp [null] // Track when MFA was enabled
  last_password_change timestamp [null] // Track password changes
  consecutive_failures int [default: 0] // Track consecutive failed attempts
  lockout_until     timestamp [null] // Account lockout timestamp
  last_ip_address   varchar(45) [null] // Last login IP
  last_user_agent   varchar(255) [null] // Last browser/device info
  created_at        timestamp [default: now()]
  updated_at        timestamp [default: now()]

  indexes {
    user_id
    last_failed_at
    consecutive_failures // For lockout checks
    (user_id, last_success_at) // For activity monitoring
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Platform usage statistics
Table platform_stats {
  id              int [pk, increment]
  platform        enum("web", "ios", "android", "api") [not null] // Added API platform
  total_logins    int [default: 0]
  active_sessions int [default: 0]
  unique_users    int [default: 0]
  avg_session_duration int [default: 0] // Average session length in seconds
  peak_concurrent_users int [default: 0] // Track max concurrent users
  errors_count int [default: 0] // Track error occurrences
  api_requests int [default: 0] // Track API usage
  date            date [not null]
  created_at      timestamp [default: now()]
  updated_at      timestamp [default: now()]
  
  indexes {
    (platform, date) [unique]
    date // For time-based queries
    platform // For platform-specific analysis
  }
}

// TAGS: INCLUDED_V2
// Geographic service availability tracking
Table service_regions {
  id int [pk, increment]
  country_code varchar(2) [not null, default: "CA"]
  province varchar(100) [not null]
  city varchar(255) [not null]
  postal_code varchar(10) [not null]
  region_type enum("urban", "suburban", "rural") [not null]
  population int [null]
  service_radius decimal(5,2) [null]
  is_active boolean [default: false]
  activation_date date [null]
  deactivation_date date [null]
  service_level enum("full", "limited", "planned", "suspended") [not null, default: "planned"]
  hcw_coverage_target int [null]
  hcw_current_count int [default: 0]
  timezone varchar(50) [not null]
  coordinates point [null]
  boundaries polygon [null]
  demand_score decimal(3,2) [default: 0.00]
  operating_hours json [null] // Store regular operating hours
  holiday_schedule json [null] // Store holiday schedules
  emergency_contact json [null] // Emergency contact info for region
  metadata json [null] // Additional region-specific data
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    (country_code, province, city, postal_code) [unique]
    service_level
    is_active
    coordinates
    demand_score
    deleted_at
    (coordinates, service_radius) // For radius searches
  }
}

// TAGS: INCLUDED_V2
// Regional service demand tracking
Table service_region_demand {
  id int [pk, increment] 
  region_id int [not null, ref: > service_regions.id]
  demand_level enum("low", "medium", "high", "critical") [not null]
  assessment_period enum("daily", "weekly", "monthly") [not null]
  waitlist_count int [default: 0]
  active_requests int [default: 0]
  unfulfilled_requests int [default: 0]
  hcw_shortage int [default: 0]
  avg_wait_time int [default: 0]
  min_wait_time int [default: 0] // Minimum wait time
  max_wait_time int [default: 0] // Maximum wait time
  peak_hours json [null]
  peak_days json [null] // Peak days of week/month
  capacity_utilization decimal(5,2) [default: 0.00] // Current capacity usage %
  service_type_demands json [null] // Demand by service type
  last_assessment_date date [not null]
  next_assessment_date date [not null]
  demand_factors json [null]
  seasonal_pattern json [null]
  forecast_demand json [null] // Future demand predictions
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    region_id
    demand_level
    assessment_period
    waitlist_count
    capacity_utilization
    last_assessment_date
    (region_id, assessment_period)
  }
}

// TAGS: INCLUDED_V2
// Service availability waitlist
Table service_waitlist {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  region_id int [not null, ref: > service_regions.id]
  service_type varchar(100) [not null]
  urgency_level enum("low", "medium", "high", "critical") [not null]
  request_date timestamp [default: now()]
  preferred_start_date date [null]
  preferred_time_range json [null]
  flexibility_score int [default: 0] // How flexible the request timing is
  special_requirements text [null]
  required_skills json [null] // Specific HCW skills needed
  service_duration int [null] // Expected duration in minutes
  recurring_schedule json [null] // For recurring service requests
  notification_preferences json [null] // How to notify the user
  notification_status enum("pending", "notified", "contacted", "follow_up_required") [default: "pending"]
  last_notification_date timestamp [null]
  next_follow_up_date timestamp [null]
  status enum("active", "fulfilled", "expired", "cancelled", "on_hold", "in_progress") [default: "active"]
  cancellation_reason enum(
    "user_requested",
    "service_unavailable",
    "no_hcw_available",
    "duplicate_request",
    "requirements_changed",
    "other"
  ) [null]
  matched_hcw_id int [null, ref: > healthcare_workers.id]
  matching_attempts int [default: 0] // Number of attempted matches
  estimated_wait_time int [null]
  priority_score decimal(5,2) [default: 0.00] // Calculated priority
  notes text [null]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  fulfilled_at timestamp [null]
  cancelled_at timestamp [null]

  indexes {
    (user_id, region_id, service_type, status)
    urgency_level
    status
    matched_hcw_id
    next_follow_up_date
    priority_score
    preferred_start_date
    (region_id, service_type, status)
    (matched_hcw_id, status)
  }
}

// Waitlist history tracking
Table service_waitlist_history {
  id int [pk, increment]
  waitlist_id int [not null, ref: > service_waitlist.id]
  status_from enum("active", "fulfilled", "expired", "cancelled", "on_hold", "in_progress") [not null]
  status_to enum("active", "fulfilled", "expired", "cancelled", "on_hold", "in_progress") [not null]
  changed_by_user_id int [not null, ref: > users.id]
  reason text [null]
  metadata json [null]
  created_at timestamp [default: now()]

  indexes {
    waitlist_id
    (status_from, status_to)
    changed_by_user_id
    created_at
  }
}

// TAGS: INCLUDED_V2
// Customer support contact information
Table support_contacts {
  id            int [pk, increment]
  type          enum("phone", "email", "website", "live_chat", "social_media", "other") [not null]
  value         varchar(255) [not null] // contact info
  description   text [null] // Additional details
  is_active     boolean [default: true] // availability status
  created_at    timestamp [default: now()]
  updated_at    timestamp [default: now()]

  Indexes {
    (type, value) [unique] // Ensures each contact method is unique
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// Subscription plans
Table subscription_plans {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  price decimal(10, 2) [not null]
  currency varchar(3) [not null, default: "CAD"]
  billing_interval enum("monthly", "yearly") [not null]
  trial_days int [null]
  features json [not null] // Features included in plan
  max_users int [null] // Maximum users allowed
  max_patients int [null] // Maximum patients allowed
  is_featured boolean [default: false]
  sort_order int [default: 0]
  status enum("active", "inactive", "deprecated") [not null, default: "active"]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    name
    status
    billing_interval
    is_featured
    sort_order
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// Subscription pricing tiers
Table subscription_price_tiers {
  id int [pk, increment]
  plan_id int [not null, ref: > subscription_plans.id]
  quantity_from int [not null] // Starting quantity for tier
  quantity_to int [null] // Ending quantity for tier (null = unlimited)
  unit_price decimal(10, 2) [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    plan_id
    (plan_id, quantity_from, quantity_to)
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// Active subscriptions
Table subscriptions {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  plan_id int [not null, ref: > subscription_plans.id]
  status enum(
    "trialing",
    "active",
    "past_due",
    "canceled",
    "unpaid",
    "paused"
  ) [not null]
  quantity int [not null, default: 1]
  trial_start timestamp [null]
  trial_end timestamp [null]
  current_period_start timestamp [not null]
  current_period_end timestamp [not null]
  cancel_at timestamp [null]
  canceled_at timestamp [null]
  cancellation_reason enum(
    "user_requested",
    "payment_failed",
    "fraudulent",
    "business_closed",
    "switched_plan",
    "other"
  ) [null]
  cancellation_details text [null]
  pause_collection bool [default: false]
  billing_cycle_anchor timestamp [not null]
  next_billing_date timestamp [null]
  billing_thresholds json [null]
  payment_method_id int [null, ref: > payment_methods.id]
  latest_invoice_id int [null, ref: > invoices.id]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id
    plan_id
    status
    current_period_end
    next_billing_date
    (user_id, plan_id)
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// Subscription items (for multiple quantities or add-ons)
Table subscription_items {
  id int [pk, increment]
  subscription_id int [not null, ref: > subscriptions.id]
  plan_id int [not null, ref: > subscription_plans.id]
  quantity int [not null, default: 1]
  unit_price decimal(10, 2) [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    subscription_id
    plan_id
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// Subscription usage tracking
Table subscription_usage {
  id int [pk, increment]
  subscription_id int [not null, ref: > subscriptions.id]
  feature_name varchar(100) [not null]
  quantity_used int [not null, default: 0]
  period_start timestamp [not null]
  period_end timestamp [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    subscription_id
    feature_name
    (subscription_id, feature_name, period_start, period_end)
  }
}

// TAGS: INCLUDED_V2 TO_BE_REVIEWED
// Subscription events for audit trail
Table subscription_events {
  id int [pk, increment]
  subscription_id int [not null, ref: > subscriptions.id]
  event_type enum(
    "created",
    "updated",
    "canceled",
    "renewed",
    "trial_started",
    "trial_ended",
    "payment_succeeded",
    "payment_failed",
    "plan_changed",
    "quantity_updated"
  ) [not null]
  previous_status enum(
    "trialing",
    "active",
    "past_due",
    "canceled",
    "unpaid",
    "paused"
  ) [null]
  new_status enum(
    "trialing",
    "active",
    "past_due",
    "canceled",
    "unpaid",
    "paused"
  ) [null]
  metadata json [null]
  created_at timestamp [default: now()]

  indexes {
    subscription_id
    event_type
    created_at
    (subscription_id, created_at)
  }
}

// TAGS: INCLUDED_V2 HISTORICAL_DATA
// storing basic info like name, email, user managing patients treatments, age, dob, gender
// other notes, address, 
Table patients {
  id integer [pk, increment]
  user_id int [not null, ref: > users.id] // user managing the patient
  email varchar(255) [unique, not null]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  middle_name varchar(100) [null]
  date_of_birth date [not null]
  gender enum("male", "female", "other") [not null]
  profile_picture varchar(255) [null]
  notes text [null]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id
    email
    (first_name, last_name)
    date_of_birth
  }
}

// TAGS: INCLUDED_V2 HISTORICAL_DATA
// Patient addresses
Table patients_addresses {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  unit_no varchar(50) [null]
  street_address varchar(255) [not null]
  city varchar(100) [not null]
  province_state_region varchar(100) [not null]
  postal_code varchar(20) [not null]
  country_code varchar(2) [not null, default: "CA"]
  is_primary boolean [default: false]
  accessibility_notes text [null]
  special_instructions text [null]
  latitude decimal(10,8) [null]
  longitude decimal(11,8) [null]
  valid_from date [null]
  valid_until date [null]
  verification_status enum("unverified", "verified", "failed") [default: "unverified"]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    patient_id
    postal_code
    (city, province_state_region, country_code)
    is_primary
    address_type
    (latitude, longitude)
    verification_status
    deleted_at
  }
}

// TAGS: INCLUDED_V2 HISTORICAL_DATA
// Enhanced patient contacts
Table patients_contacts {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  email_address varchar(255) [null]
  phone_number varchar(20) [null]
  alternate_phone varchar(20) [null]
  is_primary boolean [default: false]
  contact_type enum("emergency", "family", "guardian", "physician", "specialist", "pharmacy", "other") [not null]
  relationship_to_patient varchar(100) [null]
  contact_priority int [default: 0]
  preferred_contact_method enum("email", "phone", "sms") [not null, default: "phone"]
  preferred_contact_time enum("morning", "afternoon", "evening", "anytime") [default: "anytime"]
  authorized_to_discuss_health boolean [default: false]
  has_medical_power_of_attorney boolean [default: false]
  availability json [null]
  notes text [null]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    patient_id
    contact_type
    contact_priority
    (email_address, phone_number)
    (patient_id, contact_type, is_primary)
  }
}

// TAGS NOT_INCLUDED_V2 SUGGESTIONS
// Patient communication preferences
Table patients_communication_preferences {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  appointment_reminders boolean [default: true]
  reminder_method enum("email", "sms", "phone", "all") [default: "all"]
  reminder_timing int [default: 24] // Hours before appointment
  receive_marketing boolean [default: false]
  receive_newsletters boolean [default: false]
  preferred_contact_time json [null]
  do_not_contact boolean [default: false]
  special_instructions text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id [unique]
    reminder_method
  }
}

// TAGS: NOT_INCLUDED_V2 TO_BE_REVIEWED
// Patient medications
Table patient_medications {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  medicine_id int [not null, ref: > medicines.id]
  care_plan_id int [not null, ref: > care_plans.id]
  prescribed_by int [not null, ref: > healthcare_providers.id]
  prescribed_at timestamp [not null]
  dispensed_by int [null, ref: > pharmacies.id]
  dispensed_at timestamp [null]
  status enum(
    "active",
    "discontinued",
    "completed",
    "on_hold",
    "cancelled"
  ) [not null, default: "active"]
  dosage_amount decimal(10,2) [not null]
  dosage_unit varchar(20) [not null]
  route_of_administration enum(
    "oral",
    "topical",
    "injection",
    "inhalation",
    "other"
  ) [not null]
  frequency_type enum(
    "daily",
    "weekly",
    "monthly",
    "as_needed",
    "custom"
  ) [not null]
  frequency_times int [not null] // Times per frequency period
  frequency_period varchar(50) [null] // Custom frequency description
  timing json [not null] // Specific timing details
  start_date date [not null]
  end_date date [null]
  duration int [null] // Duration in days
  refills_authorized int [default: 0]
  refills_remaining int [default: 0]
  quantity_prescribed int [not null]
  quantity_dispensed int [default: 0]
  instructions text [not null]
  patient_directions text [not null] // Simple instructions for patient
  special_instructions text [null]
  reason_for_medication text [null]
  discontinuation_reason text [null]
  requires_monitoring boolean [default: false]
  monitoring_parameters json [null]
  last_monitored_at timestamp [null]
  side_effects_observed text [null]
  effectiveness_rating int [null] // 1-5 rating
  compliance_rate decimal(5,2) [null] // Percentage
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    patient_id
    medicine_id
    care_plan_id
    prescribed_by
    dispensed_by
    status
    frequency_type
    (start_date, end_date)
    requires_monitoring
  }
}

// TAGS: NOT_INCLUDED_V2 TO_BE_REVIEWED
// Medication schedule
Table medication_schedules {
  id int [pk, increment]
  medication_id int [not null, ref: > patient_medications.id]
  scheduled_time time [not null]
  days_of_week int [null] // Bitmap for days (1-7)
  specific_dates json [null] // For irregular schedules
  reminder_enabled boolean [default: true]
  reminder_before_minutes int [default: 30]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    medication_id
    scheduled_time
    days_of_week
  }
}

// TAGS: NOT_INCLUDED_V2 TO_BE_REVIEWED
// Medication administration records
Table medication_administrations {
  id int [pk, increment]
  medication_id int [not null, ref: > patient_medications.id]
  administered_by int [not null, ref: > users.id]
  scheduled_time timestamp [not null]
  administered_time timestamp [not null]
  status enum(
    "given",
    "missed",
    "refused",
    "held",
    "error"
  ) [not null]
  dose_given decimal(10,2) [not null]
  route_given varchar(50) [not null]
  effectiveness_noted text [null]
  side_effects_noted text [null]
  notes text [null]
  witness_required boolean [default: false]
  witnessed_by int [null, ref: > users.id]
  created_at timestamp [default: now()]

  indexes {
    medication_id
    administered_by
    scheduled_time
    administered_time
    status
    (medication_id, scheduled_time)
  }
}

// TAGS: INCLUDED_V2
// Patient personal interests
Table patients_personal_interests {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  interest_id int [not null, ref: > personal_interests.id]
  assigned_by int [not null, ref: > users.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  notes text [null]
  indexes {
    (patient_id, interest_id)
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient mobility challenges
Table patients_mobility_challenges {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  challenge_id int [not null, ref: > mobility_challenges.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    challenge_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient perception communication issues
Table patients_perception_communication_issues {
  id int [pk, increment]
  issue_id int [not null, ref: > perception_communication_issues.id]
  patient_id int [not null, ref: > patients.id]
  assigned_by int [not null, ref: > users.id]
  care_plan_id int [not null, ref: > care_plans.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    issue_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient nutritional challenges
Table patients_nutritional_challenges {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  challenge_id int [not null, ref: > nutritional_challenges.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    challenge_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient moods
Table patients_moods {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  mood_id int [not null, ref: > moods.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  indexes {
    patient_id
    mood_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient health conditions
Table patients_health_conditions {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  condition_id int [not null, ref: > health_conditions.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    condition_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient cognition
Table patients_cognition {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  cognition_id int [not null, ref: > cognition_states.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    cognition_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient allergies
Table patients_allergies {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  allergy_id int [not null, ref: > allergies.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    allergy_id
    care_plan_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Patient diagnoses
Table patients_diagnoses {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  diagnosis_id int [not null, ref: > diagnoses.id]
  care_plan_id int [not null, ref: > care_plans.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    diagnosis_id
    care_plan_id
  }
}

// TAGS: INCLUDED_V2
// Medicine catalog
Table medicines {
  id int [pk, increment]
  name varchar(255) [not null]
  generic_name varchar(255) [null]
  drug_class varchar(100) [not null]
  controlled_substance boolean [default: false]
  requires_prescription boolean [default: true]
  standard_dosage json [null] // Standard dosing guidelines
  form enum("tablet", "capsule", "liquid", "injection", "patch", "cream", "other") [not null]
  strength varchar(50) [not null] // e.g., "500mg", "10mg/ml"
  manufacturer varchar(100) [null]
  ndc_code varchar(50) [null] // National Drug Code
  din_code varchar(50) [null] // Drug Identification Number (Canada)
  warnings text [null]
  side_effects text [null]
  interactions text [null]
  storage_instructions text [null]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    name
    generic_name
    drug_class
    (ndc_code, din_code)
    controlled_substance
  }
}

// TAGS: INCLUDED_V2
// personal interests terms
Table personal_interests {
  id int [pk, increment]
  name varchar [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
Table healthcare_workers_personal_interests {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  interest_id int [not null, ref: > personal_interests.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// table for holding terms for mobility challenges care is provided for
Table mobility_challenges {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about mobility challenges managed by a user or company possible marketing purposes later
Table user_managed_mobility_challenges {
  id int [pk, increment]
  challenge_id int [not null, ref: > mobility_challenges.id]
  user_id int [not null, ref: > users.id]
  description text [null]
  assigned_at timestamp [not null]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// perception communication issues a vocabulary for holding info about care activities
Table perception_communication_issues {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// perception communication issues recorded for a patient
Table patients_perception_communication_issues {
  id int [pk, increment]
  issue_id int [not null, ref: > perception_communication_issues.id]
  patient_id int [not null, ref: > patients.id]
  assigned_by int [not null, ref: > users.id]
  care_plan_id int [not null, ref: > care_plans.id]
  description text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about perception communication issues managed by a user or company possible marketing purposes later
Table user_managed_perception_communication_issues {
  id int [pk, increment]
  issue_id int [not null, ref: > perception_communication_issues.id]
  user_id int [not null, ref: > users.id]
  description text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// holding info for terms for nutritional challenges
Table nutritional_challenges {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about nutritional challenges managed by a user or company possible marketing purposes later
Table user_managed_nutritional_challenges {
  id int [pk, increment]
  challenge_id int [not null, ref: > nutritional_challenges.id]
  user_id int [not null, ref: > users.id]
  notes text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// mood states terms info
Table moods {
  id int [pk, increment]
  name varchar(100) [unique]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about patient moods states managed by a user or company possible marketing purposes later
Table user_managed_moods {
  id int [pk, increment]
  mood_id int [not null, ref: > moods.id]
  user_id int [not null, ref: > users.id]
  notes text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// info about health conditions terms for care
Table health_conditions {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about health conditions managed by a user or company possible marketing purposes later
Table user_managed_health_conditions {
  id int [pk, increment]
  healthconditions_id int [not null, ref: > health_conditions.id]
  user_id int [not null, ref: > users.id]
  started_at date [not null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// terms for cognition states
Table cognition_states {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// terms for allergies 
Table allergies {
  id int [pk, increment]
  name varchar(200) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// diagnosis terms and conditions info
Table diagnoses {
  id int [pk, increment]
  name varchar(200) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// types of property info
Table property_types {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about patients property types
Table patients_property_types {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  property_type_id int [not null, ref: > property_types.id]
  assigned_by int [not null, ref: > users.id]
  notes text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// info about property types managed by a user or company possible marketing purposes later
Table user_managed_property_types {
  id int [pk, increment]
  property_type_id int [not null, ref: > property_types.id]
  user_id int [not null, ref: > users.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// different caresettings info
Table care_settings {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about patients care setting
Table patients_care_settings {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  care_setting_id int [not null, ref: > care_settings.id]
  assigned_by int [not null, ref: > users.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// info about care settings managed by a user or company possible marketing purposes later
Table user_managed_care_settings {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  care_setting_id int [not null, ref: > care_settings.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// care settings HCW preferrs working in
Table healthcare_workers_preferred_care_settings {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  care_setting_id int [not null, ref: > care_settings.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// types of jobs i.e. "employment", "independent contractor", "volunteer", "sponsorship"
Table job_types {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  deleted_at timestamp [null]
}

// TAGS: INCLUDED_V2
// job types preferrence for HCWs
Table healthcare_workers_preferred_job_types {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  job_type_id int [not null, ref: > job_types.id]
  assigned_at timestamp [not null]
  updated_at timestamp [not null]
  deleted_at timestamp [null]
  notes text [null]
}


// TAGS: INCLUDED_V2
// Payment schedules
// consider transaction_date date [null]
// consdier naming change pay_period_frequency
Table payment_schedules {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  job_id int [not null, ref: > jobs.id]
  patient_id int [not null, ref: > patients.id]
  timezone varchar(50) [not null]
  date_format varchar(50) [not null]
  time_format varchar(50) [not null]
  calendar_start_day enum("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday") [not null]
  frequency enum("weekly_52", "weekly_53", "biweekly_26", "biweekly_27", "semimonthly_24", "monthly_12") [not null]
  start_date date [not null]
  end_date date [null]
  next_payment_date date [not null]
  status enum("active", "paused", "completed", "cancelled") [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, job_id)
    patient_id
    frequency
    status
    next_payment_date
  }
}

// TAGS: INCLUDED_V2
// User wallets
Table users_wallets {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  balance decimal(10, 2) [not null]
  currency varchar(3) [not null, default: "CAD"]
  status enum("active", "frozen", "closed") [not null]
  last_updated timestamp [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    status
  }
}

// TAGS: INCLUDED_V2
// User invoices
Table users_invoices {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  patient_id int [not null, ref: > patients.id]
  invoice_number varchar(50) [unique, not null]
  period_start date [not null]
  period_end date [not null]
  total_amount decimal(10,2) [not null]
  tax_amount decimal(10,2) [not null]
  currency varchar(3) [not null, default: "CAD"]
  due_date date [not null]
  status enum("draft", "pending", "paid", "overdue", "cancelled") [not null]
  payment_method enum("credit_card", "debit_card", "bank_transfer", "wallet") [null]
  paid_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    patient_id
    invoice_number
    status
    due_date
  }
}

// TAGS: INCLUDED_V2
// Invoice items
Table invoices_items {
  id int [pk, increment]
  schedule_id int [not null, ref: > care_schedules.id]
  hcw_id int [not null, ref: > healthcare_workers.id]
  period_start date [not null]
  period_end date [not null]
  total_hours decimal(5,2) [not null]
  total_pay decimal(10,2) [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Expenses
Table expenses {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  worker_id int [not null, ref: > healthcare_workers.id]
  schedule_id int [not null, ref: > care_schedules.id]
  expense_date date [not null]
  description varchar(255) [not null]
  payment_method enum("cash", "debit", "credit", "direct_deposit", "digital_wallet", "cheque") [not null]
  category enum("groceries", "medical", "ppe", "supplies", "parking", "travel", "meals", "incidental", "entertainment", "other") [not null]
  amount decimal(10, 2) [not null]
  currency varchar(3) [not null, default: "CAD"]
  receipt_url varchar(255) [null]
  notes text [null]
  status enum("pending", "approved", "rejected") [not null]
  approved_by int [null, ref: > users.id]
  approved_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    worker_id
    schedule_id
    category
    status
    expense_date
  }
}

// TAGS: INCLUDED_V2
// probably wrong we don't want to store same info as Expenses
Table users_transactions {
  id int [pk, increment]
  wallet_id int [not null, ref: > users_wallets.id]
  recorded_by int [not null, ref: > healthcare_workers.id]
  job_id int [not null, ref: > jobs.id]
  transaction_type enum("Expense", "Deposit", "Refund", "Adjustment", 'invoice payment') [not null]
  category enum("HCW Service", "Medical Supply", "Transportation", "Other") [not null]
  amount decimal(10,2) [not null]
  payment_method enum("Cash", "Credit Card", "Insurance", "Wallet Deduction") [not null]
  status enum("Pending", "Completed", "Reversed", 'declined') [not null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Payment methods
Table payment_methods {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  type enum("credit_card", "debit_card", "bank_account") [not null]
  provider varchar(50) [not null] // "visa", "mastercard", "amex", etc.
  last_four varchar(4) [not null]
  expiry_month int [null]
  expiry_year int [null]
  is_default boolean [default: false]
  status enum("active", "expired", "cancelled") [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    type
    status
  }
}

// TAGS: INCLUDED_V2
// Generated pay stubs
Table pay_stubs_generated {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  schedule_id int [not null, ref: > care_schedules.id]
  period_start date [not null]
  period_end date [not null]
  total_hours decimal(5,2) [not null]
  regular_hours decimal(5,2) [not null]
  overtime_hours decimal(5,2) [not null]
  regular_rate decimal(10,2) [not null]
  overtime_rate decimal(10,2) [not null]
  gross_pay decimal(10,2) [not null]
  deductions decimal(10,2) [not null]
  net_pay decimal(10,2) [not null]
  status enum("draft", "published", "paid") [not null]
  generated_by int [not null, ref: > users.id]
  generated_at timestamp [not null]
  paid_at timestamp [null]
  document_url varchar(255) [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
    schedule_id
    status
    (period_start, period_end)
  }
}

// TAGS: INCLUDED_V2
// Job messages
// fix this
Table job_messages {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  sender_id int [not null, ref: > users.id]
  receiver_id int [not null, ref: > users.id]
  message_text text [not null]
  attachment_url varchar(255) [null]
  job_application_id int [null, ref: > healthcare_workers_job_applications.id]
  hcwjob_id int [ref: > healthcare_workers_jobs.id]
  job_application_id int [null, ref: > job_applications.id]
  sent_at timestamp [null]
  is_read boolean [default: false]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    job_id
    sender_id
    receiver_id
    is_read
    created_at
  }
}

// TAGS: INCLUDED_V2 DUPLICATED
// Healthcare worker rates
Table healthcare_workers_rates {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  rate decimal(10,2) [not null]
  rate_type enum('hourly', 'daily', 'contract', 'live_in_daily') [not null]
  effective_date date [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, rate_type)
    effective_date
    (worker_id, effective_date)
  }
}

// TAGS: INCLUDED_V2
// Healthcare worker expertise
Table healthcare_workers_expertise {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Healthcare worker expertise assignments
Table healthcare_workers_expertise_info {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  expertise_id int [not null, ref: > healthcare_worker_expertise.id]
  assigned_at date [not null]
  notes text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, expertise_id)
  }
}

// TAGS: INCLUDED_V2 DUPLICATED
// Healthcare worker category assignments
Table healthcare_workers_category_assignments {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  category_id int [not null, ref: > healthcare_workers_categories.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, category_id)
  }
}

// TAGS: INCLUDED_V2 DUPLICATED
// Healthcare worker credentials
Table healthcare_workers_credentials {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  credential_id int [not null, ref: > credentials.id]
  issue_date date [null]
  expiration_date date [null]
  certification_authority varchar(255) [null]
  document_link varchar(255) [null]
  document_number varchar(100) [null]
  verification_status enum("pending", "verified", "expired") [not null, default: "pending"]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, credential_id)
    expiration_date
    verification_status
  }
}

// TAGS: INCLUDED_V2 DUPLICATED
// Healthcare worker services
Table healthcare_workers_services {
  id int [pk, increment]
  service_id int [not null, ref: > services.id]
  worker_id int [not null, ref: > healthcare_workers.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, service_id)
  }
}

// TAGS: INCLUDED_V2
// Healthcare workers jobs history info
Table healthcare_workers_jobs {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  worker_id int [not null, ref: > healthcare_workers.id]
  status enum('active', 'completed', 'terminated', 'resigned') [not null]
  hired_at timestamp [null]
  start_date date [not null]
  end_date date [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, job_id)
    status
    start_date
    end_date
  }
}

// TAGS: INCLUDED_V2 DUPLICATED
// Healthcare worker job applications
Table healthcare_workers_job_applications {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  worker_id int [not null, ref: > healthcare_workers.id]
  status enum("pending", "shortlisted", "interview", "meet_and_greet", "hired", "rejected") [not null]
  applied_at timestamp [not null]
  hired_at timestamp [null]
  resume_url varchar(255) [null]
  cover_letter text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, job_id)
    status
    applied_at
  }
}

// TAGS: INCLUDED_V2 
// Ethnicities terms
Table ethnicities {
  id int [pk, increment]
  name varchar(100) [not null, unique]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
Table healthcare_workers_tags {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  tag_id int [not null, ref: > tags.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Tags terms
Table tags {
  id int [pk, increment]
  name varchar(255) [not null, unique]
  description text [null]
  created_at  timestamp [default: now()]
  updated_at  timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// services terms info
Table services {
  id int [pk, increment]
  name varchar [not null, unique]
  description text [null]
  created_at  timestamp [default: now()]
  updated_at  timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// skills terms info
Table skills {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at  timestamp [default: now()]
  updated_at  timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Multi-factor authentication support
Table mfa_settings {
  id          int [pk, increment]
  user_id     int [not null, ref: > users.id]
  type        enum("authenticator_app", "sms", "email") [not null]
  secret      varchar(255) [not null] // Encrypted MFA secret
  backup_codes json [null] // Encrypted backup codes
  enabled     boolean [default: false]
  created_at  timestamp [default: now()]
  updated_at  timestamp [default: now()]

  indexes {
    user_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// API access management
Table api_keys {
  id          int [pk, increment]
  user_id     int [not null, ref: > users.id]
  key_hash    varchar(255) [not null] // Hashed API key
  name        varchar(100) [not null] // Purpose/name of the key
  permissions json [not null] // Specific permissions for this key
  last_used   timestamp [null]
  expires_at  timestamp [null]
  revoked_at  timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    key_hash
    user_id
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Role-based access control
Table roles {
  id          int [pk, increment]
  name        varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
Table user_roles {
  id         int [pk, increment]
  user_id    int [not null, ref: > users.id]
  role_id    int [not null, ref: > roles.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (user_id, role_id) [unique]
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
Table permissions {
  id          int [pk, increment]
  name        varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
Table role_permissions {
  role_id       int [not null, ref: > roles.id]
  permission_id int [not null, ref: > permissions.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (role_id, permission_id) [unique]
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Audit logging
Table audit_logs {
  id            int [pk, increment]
  user_id       int [null, ref: > users.id] // Null for system actions
  action        varchar(100) [not null]
  entity_type   varchar(100) [not null] // Table name
  entity_id     int [not null] // Primary key of affected record
  changes       json [not null] // Before/after values
  ip_address    varchar(45) [not null]
  user_agent    text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    entity_type
    entity_id
    created_at
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS
// Rate limiting
Table rate_limits {
  id            int [pk, increment]
  ip_address    varchar(45) [not null]
  endpoint      varchar(255) [not null]
  request_count int [not null]
  window_start  timestamp [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (ip_address, endpoint)
    window_start
  }
}

// TAGS: INCLUDED_V2, DUPLICATED
// Application documents
Table job_application_documents {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  application_id int [not null, ref: > healthcare_workers_job_applications.id]
  document_type enum("resume", "certification", "reference", "other") [not null]
  file_url varchar(255) [not null]
  uploaded_at timestamp [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    application_id
    document_type
  }
}

// TAGS: INCLUDED_V2
// Credentials
Table credentials {
  id int [pk, increment]
  name varchar(255) [not null, unique]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Work environment exceptions
Table work_environment_exceptions {
  id int [pk, increment]
  name varchar(200) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Healthcare worker skills
Table healthcare_workers_skills {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  skill_id int [not null, ref: > skills.id]
  proficiency_level enum("beginner", "intermediate", "advanced", "expert") [not null]
  years_experience int [null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, skill_id)
    proficiency_level
  }
}

// TAGS: INCLUDED_V2
// Healthcare worker wallet
Table healthcare_workers_wallets {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  balance decimal(10, 2) [not null]
  currency varchar(3) [not null, default: "CAD"]
  last_updated timestamp [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
    currency
  }
}

// TODO: name change to reviews?
// TAGS: INCLUDED_V2, DUPLICATED
// Healthcare worker performance metrics
Table healthcare_workers_performance_metrics {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TODO: name change to reviews?
// TAGS: INCLUDED_V2, DUPLICATED
// Healthcare worker performance records
Table healthcare_workers_performance_records {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  metric_id int [not null, ref: > healthcare_workers_performance_metrics.id]
  rating int [not null, note: "Scale of 1-5"]
  review_period_start date [not null]
  review_period_end date [not null]
  reviewer_id int [not null, ref: > users.id]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, metric_id)
    rating
    review_period_start
    review_period_end
  }
}

// TAGS: INCLUDED_V2, DUPLICATED
// Healthcare worker activity logs
Table healthcare_workers_activity_logs {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  last_calendar_update date [not null]
  last_login date [not null]
  member_since date [not null]
  total_bookings int [not null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
  }
}

// TAGS: INCLUDED_V2
// Healthcare worker availability
Table healthcare_workers_availability {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  day_of_week enum("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday") [not null]
  start_time time [not null]
  end_time time [not null]
  is_recurring boolean [default: true]
  effective_start_date date [not null]
  effective_end_date date [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
    day_of_week
    (effective_start_date, effective_end_date)
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// Healthcare worker notifications
Table healthcare_workers_notifications {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  type enum("schedule_change", "new_job_match", "credential_expiring", "payment_received", "performance_review") [not null]
  title varchar(255) [not null]
  message text [not null]
  is_read boolean [default: false]
  metadata json [null]
  created_at timestamp [default: now()]

  indexes {
    worker_id
    type
    is_read
    created_at
  }
}

// TAGS: INCLUDED_V2
// Care plans - Comprehensive patient care management
Table care_plans {
  id int [pk, increment]
  patient_id int [not null, ref: > patients.id]
  job_id int [not null, ref: > jobs.id]
  created_by int [not null, ref: > users.id]
  status enum("draft", "active", "completed", "archived") [not null]
  description text [null]
  start_date date [not null]
  end_date date [not null]
  created_by int [not null, ref: > users.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Care plan team members
Table care_plan_team_members {
  id int [pk, increment]
  care_plan_id int [not null, ref: > care_plans.id]
  worker_id int [not null, ref: > healthcare_workers.id]
  role enum("primary_caregiver", "secondary_caregiver", "support_worker", "therapist", "nurse", "physician", "specialist", "other") [not null]
  start_date date [not null]
  end_date date [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    care_plan_id
    worker_id
    role
    (start_date, end_date)
  }
}

// TAGS: INCLUDED_V2
// Care schedules
// TODO: check for compaibility with jobs and care plans
// care schedules associated with a care plan
Table care_schedules {
  id integer [pk, increment]
  patient_id int [not null, ref: > patients.id]
  care_plan_id int [not null, ref: > care_plans.id]
  worker_id int [null, ref: > healthcare_workers.id]
  total_hours integer [not null]
  start_time timestamp [not null]
  end_time timestamp [not null]
  location varchar(255) [not null]
  status enum("pending", "completed", "cancelled", "missed") [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    patient_id
    care_plan_id
    worker_id
    status
    (start_time, end_time)
    (worker_id, status)
    (patient_id, status)
    (care_plan_id, status)
    location
  }
}

// TAGS: INCLUDED_V2
// Jobs
Table jobs {
  id integer [pk, increment]
  user_id int [not null, ref: > users.id]
  patient_id int [not null, ref: > patients.id]
  status enum("draft", "active", "paused", "closed", "reposted") [not null]
  //position varchar(255) [not null]
  currency varchar(10) [not null, default: "CAD"]
  employment_class enum("permanent_pt", "permanent_ft", "temporary_pt", "temporary_ft", "casual") [not null]
  description text [not null]
  total_budget decimal(10,2) [null]
  hourly_rate decimal(10,2) [null]
  live_in_daily_rate decimal(10,2) [null]
  care_recurrence_type enum("one_time", "repeat_weekly") [not null]
  shift_type enum("day", "night", "live_in") [not null]
  start_date date [not null]
  end_date date [not null]
  start_time time [not null]
  end_time time [not null]
  total_weekly_hours decimal(5,2) [not null]
  expected_care_duration int [not null]
  experience_years_required int [null]
  job_type enum("employment", "contractor", "volunteer", "sponsorship") [not null]
  schedule_type enum("permanent_pt", "permanent_ft", "temporary_pt", "temporary_ft", "casual") [not null]
  salary_type enum("hourly", "weekly", "biweekly", "monthly", "annual") [not null]
  pay_period_schedule enum("Bi-Weekly (26/year)", "Bi-Weekly (27/year)", "Manual", "Monthly (12/year)", "Semi-Monthly Non-Standard", "Weekly") [not null]
  policy_group enum("Webookcare App Healthcare Workers") [not null]
  permission_group enum("Regular Employee (Punch In/Out)", "Admin", "Manager") [not null]
  work_days json [not null] // Array of days: ["monday", "tuesday", etc.]
  additional_notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    user_id
    patient_id
    status
    employment_class
    job_type
    (start_date, end_date)
  }
}

// created during job posting process for position requirements
Table jobs_healthcare_workers_position {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  patient_id int [not null, ref: > patients.id]
  hcw_id int [null, ref: > healthcare_workers.id]
  category_id int [not null, ref: > healthcare_workers_categories]
  subcategory_id int [not null, ref: > healthcare_workers_subcategories]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Job work environment exceptions
Table jobs_environment_exceptions {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  exception_id int [not null, ref: > work_environment_exceptions.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (job_id, exception_id)
  }
}

// TAGS: INCLUDED_V2
// Job required languages
Table jobs_required_languages {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  language_id int [not null, ref: > languages.id]
  proficiency_level enum("basic", "intermediate", "fluent", "native") [not null]
  is_mandatory boolean [default: true]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (job_id, language_id)
    proficiency_level
  }
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// TODO: check for duplications
// historical data for building patient profiles for later
Table patients_preferred_languages {
    id int [pk, increment]
    language_id int [not null, ref: > languages.id]
    patient_id int [not null, ref: > patients.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// TODO: check for duplications
// historical data for building user profiles for later use
Table users_preferred_languages {
    id int [pk, increment]
    language_id int [not null, ref: > languages.id]
    user_id int [not null, ref: > users.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// historical info for building patient profiles for later use
Table patients_preferred_skills {
    id int [pk, increment]
    skill_id int [not null, ref: > skills.id]
    patient_id int [not null, ref: > patients.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// historical info for building user profiles for later use
Table users_preferred_skills {
    id int [pk, increment]
    skill_id int [not null, ref: > skills.id]
    user_id int [not null, ref: > users.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// historical info for building patient profiles for later use
Table patients_preferred_credentials {
    id int [pk, increment]
    credentials_id int [not null, ref: > credentials.id]
    patient_id int [not null, ref: > patients.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: NOT_INCLUDED_V2 SUGGESTIONS HISTORICAL_DATA
// historical info for building user profiles for later use
Table users_preferred_credentials {
    id int [pk, increment]
    credentials_id int [not null, ref: > credentials.id]
    user_id int [not null, ref: > users.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2 POTENTIALLY_TO_BE_REMOVED
// info for child care activities
Table child_care_activities {
    id int [pk, increment]
    name varchar(100) [unique, not null]
    description text [null]
    created_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2 TO_BE_REMOVED
// jobs involving child care activities and hcw who did the job
//Table jobs_child_care_activities {
//    id int [pk, increment]
//    job_id int [not null, ref: > jobs.id]
//    hcw_id int [not null, ref: > healthcare_workers.id]
//    notes text [null]
//    assigned_at timestamp [default: now()]
//    updated_at timestamp [default: now()]
//}

// TAGS: INCLUDED_V2 POTENTIALLY_TO_BE_REMOVED
// info for adult care activities
Table adult_care_activities {
    id int [pk, increment]
    name varchar(100) [unique, not null]
    description text [null]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// adult care activities for a specific job
//Table jobs_adult_care_activities {
//    id int [pk, increment]
//    job_id int [not null, ref: > jobs.id]
//    hcw_id int [not null, ref: > healthcare_workers.id]
//    notes text [null]
//    assigned_at timestamp [default: now()]
//    updated_at timestamp [default: now()]
//}

// TAGS: INCLUDED_V2
// care team assigned for the care plan
Table care_plan_care_team {
  id int [pk, increment]
  care_plan_id int [not null, ref: > care_plans.id]
  hcw_id int [not null, ref: > healthcare_workers.id]
  role enum("Primary Caregiver", "Secondary Caregiver", "Support Worker", "Therapist", "Nurse", "Physician", "Specialist", "Other") [not null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// chartting for care plans for a patient during a job
Table care_plan_chartting {
  id int [primary key, increment]
  patient_id int [not null, ref: > patients.id]
  hcw_id int [not null, ref: > healthcare_workers.id]
  care_plan_id int [not null, ref: > care_plan.id]
  chart_date timestamp [not null]
  vital_signs json [null]
  medications_administered json [null]
  additional_notes text [null]
  attachments json [null]
  signature varchar(255) [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
// Join table for the many-to-many relationship
Table jobs_credentials {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  credential_id int [not null, ref: > credentials.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
// Join table for the many-to-many relationship
Table jobs_services {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  service_id int [not null, ref: > services.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: TO_BE_REVIEWED
// Join table for the many-to-many relationship
Table jobs_personal_interests {
  id int [pk, increment]
  job_id int [not null, ref: > jobs.id]
  interest_id int [not null, ref: > personal_interests.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// base table for healthcare workers info
Table healthcare_workers {
  id int [pk, increment]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  middle_name varchar(100) [null]
  business_name varchar(255) [null]
  legal_name varchar(255) [null]
  email varchar(255) [unique, not null]
  hashed_password varchar(255) [not null]
  date_of_birth date [not null]
  sin_ssn varchar(20) [unique, not null]
  gender enum("Male", "Female", "Other") [not null]
  contact_info varchar(255) [not null]
  ethnicity int [null, ref: > ethnicities.id]
  status enum("Active", "Inactive (Temporary)", "Leave - Illness/Injury", "Leave - Maternity/Parental", "Leave - Other", "Terminated/Quit") [not null]
  profile_picture varchar(255) [null]
  intro_video varchar(255) [null]
  experience_years int [null]
  membership_start date [null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
Table rates {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  rate decimal(10,2) [not null]
  rate_type enum('hourly', 'daily', 'contract', 'live-in flat daily') [not null]
  effective_date date [not null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// shifts terms for hcw
Table healthcare_workers_shifts {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// shifts preferrence for hcw
Table healthcare_workers_preferred_shifts {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  shift_id int [not null, ref: > healthcare_workers_shifts.id]
  notes text [null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// healthcare worker schedules types ["Permanent P/T", "Permanent F/T", "Temporary P/T", "Temporary F/T", "Casual"]
Table healthcare_workers_schedules {
  id int [pk, increment]
  name varchar(100) [unique, not null]
  description text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// healthcare worker schedules preferrence
Table healthcare_workers_preferred_schedules {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  schedule_id int [not null, ref: > healthcare_workers_schedules.id]
  num_hours enum('1-8', '8-20', '20-40', '40+') [not null]
  start_date date [not null]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// address history info for HCWs
Table healthcare_workers_addresses {
  id int [pk, increment] // Unique Address ID
  hcw_id int [not null, ref: > healthcare_workers.id]
  unit_no varchar(50) [null]
  street_address varchar(255) [not null]
  city varchar(100) [not null]
  province varchar(100) [not null]
  postal_code varchar(20) [not null]
  country varchar(100) [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
// hcw categories [Nursing, Childcare, Support Worker, etc.]
Table healthcare_workers_categories {
    id int [pk, increment]
    category varchar(100) [not null, unique]
    description text [null]
    created_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
// the categories hcw belongs to or works in
Table healthcare_workers_categories_info {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  hcw_categories_id int [not null, ref: > healthcare_workers_categories.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
// the subcategories hcw belongs to or works in
Table healthcare_workers_subcategories_info {
    id int [pk, increment]
    hcw_id int [not null, ref: > healthcare_workers.id]
    hcw_subcategory_id int [not null, ref: > healthcare_workers_subcategories.id]
    assigned_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2, TO_BE_REVIEWED
// subcategories for hcw categories [nanny for child care, etc.]
Table healthcare_workers_subcategories {
    id int [pk, increment]
    cat_id int [not null, ref: > healthcare_workers_categories.id]
    notes text [null]
    created_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: TO_BE_REVIEWED POTENTIAL_OVERLAP
// positions vocab for HCWs
Table healthcare_workers_positions {
    id int [pk, increment]
    name varchar(100) [not null, unique]
    notes text [null]
    created_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: TO_BE_REVIEWED
// historical info for HCW positions
Table healthcare_workers_positions_info {
    id int [pk, increment]
    hcw_id int [not null, ref: > healthcare_workers.id]
    hcw_position_id int [not null, ref: > healthcare_workers_positions.id]
    start_date date [not null]
    end_date date [null]
    notes text [null]
    created_at timestamp [default: now()]
    updated_at timestamp [default: now()]
}

// TAGS: TO_BE_REVIEWED, DUPLICATED
// contacts info for HCWs
// TODO: check and fix like other tables
Table healthcare_workers_contacts {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  email_address varchar(255) [null]
  phone_number varchar(20) [null]
  is_primary boolean [default: false]
  contact_type enum("personal", "emergency", "business", "reference", "other") [not null]
  relationship varchar(100) [null] // For emergency contacts: family member, friend, etc.
  phone_verified boolean [default: false]
  email_verified boolean [default: false]
  preferred_contact_method enum("email", "phone", "both") [not null]
  contact_availability json [null] // Store preferred contact hours/days
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    worker_id
    (email_address, phone_number)
    contact_type
    is_primary
    (worker_id, contact_type, is_primary)
  }
}

// TAGS: TO_BE_REVIEWED
// TODO: verify design stat
// notes info for HCWs
Table healthcare_workers_notes {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  notes text [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TODO: verify TAGS
// TAGS: INCLUDED_V2
// documents uploaded by HCWs for a specific application
Table job_application_documents {
  id int [pk, increment]
  application_id int [not null, ref: > job_applications.id]
  document_type enum("Resume", "Certification", "Reference", "Other") [not null]
  file_url varchar [not null]
  uploaded_at timestamp [not null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// work environment exceptions preferrence for hcw
Table healthcare_workers_preferred_environment_exceptions {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  exception_id int [not null, ref: > work_environment_exceptions.id]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// Healthcare worker secondary emails
Table healthcare_workers_emails {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  email varchar(255) [unique, not null]
  is_primary boolean [default: false]
  verified boolean [default: false]
  assigned_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, email) [unique]
  }
}

// Healthcare worker authentication methods
Table healthcare_worker_auth {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  provider_id int [not null, ref: > auth_providers.id]
  provider_uid varchar(255) [not null] // External provider's user ID
  email varchar(255) [null] // Email associated with this auth method
  access_token text [null] // OAuth access token
  refresh_token text [null] // OAuth refresh token
  token_expires_at timestamp [null]
  last_login_at timestamp [null]
  is_primary boolean [default: false] // Primary auth method for worker
  metadata json [null] // Additional provider-specific data
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    (worker_id, provider_id) [unique]
    provider_uid
    email
    is_primary
    last_login_at
  }
}

// Healthcare worker phone verification
Table healthcare_worker_phone_verifications {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  phone_number varchar(20) [not null]
  verification_code varchar(6) [not null] // SMS verification code
  is_verified boolean [default: false]
  expires_at timestamp [not null] // Code expiration time
  attempts int [default: 0] // Number of verification attempts
  verified_at timestamp [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  
  indexes {
    (worker_id, phone_number) [unique] // One verification process per phone number
    verification_code
    expires_at
  }
}

// Healthcare worker security logs
Table healthcare_worker_security_logs {
  id int [pk, increment] 
  worker_id int [not null, ref: > healthcare_workers.id]
  action enum("failed_login", "successful_login", "password_reset_requested", "password_reset_completed", "account_locked", "account_unlocked", "mfa_enabled", "mfa_disabled", "suspicious_activity", "ip_change", "device_change", "password_changed", "email_changed", "profile_updated") [not null]
  ip_address varchar(45) [not null]
  user_agent text
  location json [null] // City, country, coordinates
  device_info json [null] // OS, browser, etc
  metadata json [null]
  severity enum("info", "warning", "critical") [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
    action
    severity  
    created_at
    ip_address
  }
}

// Healthcare worker sessions
Table healthcare_worker_sessions {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  session_token varchar(255) [not null]
  ip_address varchar(45) [not null]
  user_agent text
  device_info json [null]
  location json [null]
  expires_at timestamp [not null]
  last_activity timestamp [default: now()]
  ended_at timestamp [null]
  end_reason enum("expired", "logged_out", "session_invalidated") [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    session_token
    worker_id
    expires_at
    ip_address
  }
}

// Healthcare worker login statistics
Table healthcare_worker_login_stats {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  successful_logins int [default: 0]
  failed_attempts int [default: 0]
  last_failed_at timestamp [null]
  last_success_at timestamp [null]
  password_resets int [default: 0]
  suspicious_activities int [default: 0]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
  }
}

// Healthcare worker MFA settings
Table healthcare_worker_mfa_settings {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  type enum("authenticator_app", "sms", "email") [not null]
  secret varchar(255) [not null] // Encrypted MFA secret
  backup_codes json [null] // Encrypted backup codes
  enabled boolean [default: false]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    worker_id
  }
}

// Healthcare worker password resets
Table healthcare_worker_password_resets {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  reset_token varchar(255) [not null]
  expires_at timestamp [not null]
  created_at timestamp [default: now()]
  used boolean [default: false]
  ip_address varchar(45) [not null]
  user_agent text
  success boolean [default: false]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    reset_token
    worker_id
    expires_at
  }
}

// entry created when user creates the care plans
// diagnosis info related to the care plans
Table care_plans_diagnoses {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  diagnosis_id int [not null, ref: > diagnoses.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_allergies {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  allergy_id int [not null, ref: > allergies.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_cognition_states {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  cognition_id int [not null, ref: > cognition_states.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_moods {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  mood_id int [not null, ref: > mood.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_health_conditions {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  condition_id int [not null, ref: > health_conditions.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_nutritional_challenges {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  challenge_id int [not null, ref: > nutritional_challenges.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_perception_communication_issues {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  issue_id int [not null, ref: > perception_communication_issues.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// entry created when user creates the care plans
Table care_plans_mobility_challenges {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  challenge_id int [not null, ref: > mobility_challenges.id]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// SUGGESTION: tracking sharing of careplans
// which hcw have access to a careplan
Table care_plans_shares {
  id int [pk, increment]
  careplan_id int [not null, ref: > care_plans.id]
  hcw_id int [not null, ref: > healthcare_workers.id]
  status enum("pending", "accepted", "declined") [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// Linked social media accounts
Table social_media_accounts {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  platform enum("twitter", "linkedin", "instagram", "tiktok", "youtube", "facebook", "pinterest", "snapchat") [not null]
  username varchar(255) [not null]
  profile_url varchar(255) [null]
  account_verified boolean [default: false]
  follower_count int [null]
  is_business_account boolean [default: false]
  engagement_rate decimal(5,2) [null]
  last_synced_at timestamp [null]
  access_token text [null]
  refresh_token text [null]
  token_expires_at timestamp [null]
  metadata json [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    (user_id, platform) [unique]
    username
    platform
    is_business_account
    account_verified
  }
}

// TAGS: INCLUDED_V2
// Tracks HCWs' historical job info (only if hired)
Table healthcare_workers_jobs {
  id int [pk, increment]
  hcw_id int [not null, ref: > healthcare_workers.id]
  job_id int [not null, ref: > jobs.id]
  status enum('active', 'completed', 'terminated', 'resigned') [not null]
  hired_at timestamp [null]
  start_date date [not null]
  end_date date [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// TAGS: INCLUDED_V2
// activity info stored for a HCW
Table healthcare_workers_activity {
  id int [pk, increment]
  last_calendar_update date [not null]
  last_login date [not null]
  member_since date [not null]
  total_no_bookings int [not null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
}

// Track patient management history - records individual changes
Table user_patient_management_history {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  patient_id int [not null, ref: > patients.id]
  action enum("added", "removed") [not null]
  previous_state json [null]
  new_state json [null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    patient_id
    action
    created_at
  }
}

// Current active patient management assignments
Table user_managed_patients {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  patient_id int [not null, ref: > patients.id]
  relationship enum("primary_caregiver", "family_member", "guardian", "power_of_attorney", "healthcare_proxy", "case_manager", "other") [not null]
  is_primary_manager boolean [default: false]
  access_level enum("full", "limited", "read_only") [not null]
  start_date date [not null]
  end_date date [null]
  notes text [null]
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]
  deleted_at timestamp [null]

  indexes {
    (user_id, patient_id) [unique] // Ensures no duplicate assignments
    relationship
    is_primary_manager
    access_level
    (start_date, end_date)
  }

  // Ensure no overlapping date ranges for same user-patient pair
  checks {
    no_overlap: "NOT EXISTS (
      SELECT 1 FROM user_managed_patients p2 
      WHERE p2.user_id = user_id 
      AND p2.patient_id = patient_id
      AND p2.id != id
      AND p2.deleted_at IS NULL
      AND (
        (start_date BETWEEN p2.start_date AND COALESCE(p2.end_date, '9999-12-31'))
        OR (COALESCE(end_date, '9999-12-31') BETWEEN p2.start_date AND COALESCE(p2.end_date, '9999-12-31'))
      )
    )"
  }
}

// Current aggregated statistics - updated periodically
Table user_patient_management_stats {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  total_patients_managed int [default: 0]
  active_patients int [default: 0]
  completed_care_plans int [default: 0]
  active_care_plans int [default: 0]
  total_care_hours decimal(10,2) [default: 0]
  total_healthcare_workers int [default: 0]
  last_patient_added_at timestamp [null]
  last_care_plan_updated_at timestamp [null]
  stats_period_start date [not null] // Start of the stats period
  stats_period_end date [not null] // End of the stats period
  created_at timestamp [default: now()]
  updated_at timestamp [default: now()]

  indexes {
    user_id
    (stats_period_start, stats_period_end)
    total_patients_managed
    active_patients
  }

  // Ensure no overlapping periods for same user
  checks {
    no_overlap: "NOT EXISTS (
      SELECT 1 FROM user_patient_management_stats s2 
      WHERE s2.user_id = user_id 
      AND s2.id != id
      AND (
        (stats_period_start BETWEEN s2.stats_period_start AND s2.stats_period_end)
        OR (stats_period_end BETWEEN s2.stats_period_start AND s2.stats_period_end)
      )
    )"
  }
}

// Healthcare worker devices
Table healthcare_worker_devices {
  id int [pk, increment]
  worker_id int [not null, ref: > healthcare_workers.id]
  device_id varchar(255) [not null]
  device_type varchar(50) [not null]
  device_name varchar(100)
  os varchar(50)
  os_version varchar(20)
  browser varchar(50)
  browser_version varchar(20)
  is_trusted boolean [default: false]
  is_active boolean [default: true]
  last_used timestamp
  last_ip varchar(45)
  last_location json [null]
  created_at timestamp [default: now()]
  deactivated_at timestamp [null]

  indexes {
    (worker_id, device_id) [unique]
    is_active
    device_type
  }
}